
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047bc  080041ac  080041ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008968  08008968  00008968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  00010080  2**0
                  CONTENTS
  4 .ARM          00000008  08008a70  08008a70  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  00010080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00008a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00008a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008a80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010080  2**0
                  CONTENTS
 10 .bss          0000012c  20000080  20000080  00010080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  00010080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110fa  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002817  00000000  00000000  000211aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000de0  00000000  00000000  000239c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000cc8  00000000  00000000  000247a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00025493  00000000  00000000  00025470  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c793  00000000  00000000  0004a903  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dc6db  00000000  00000000  00057096  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00133771  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003db0  00000000  00000000  001337ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080041ac <__do_global_dtors_aux>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4c05      	ldr	r4, [pc, #20]	; (80041c4 <__do_global_dtors_aux+0x18>)
 80041b0:	7823      	ldrb	r3, [r4, #0]
 80041b2:	b933      	cbnz	r3, 80041c2 <__do_global_dtors_aux+0x16>
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <__do_global_dtors_aux+0x1c>)
 80041b6:	b113      	cbz	r3, 80041be <__do_global_dtors_aux+0x12>
 80041b8:	4804      	ldr	r0, [pc, #16]	; (80041cc <__do_global_dtors_aux+0x20>)
 80041ba:	f3af 8000 	nop.w
 80041be:	2301      	movs	r3, #1
 80041c0:	7023      	strb	r3, [r4, #0]
 80041c2:	bd10      	pop	{r4, pc}
 80041c4:	20000080 	.word	0x20000080
 80041c8:	00000000 	.word	0x00000000
 80041cc:	08008950 	.word	0x08008950

080041d0 <frame_dummy>:
 80041d0:	b508      	push	{r3, lr}
 80041d2:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <frame_dummy+0x10>)
 80041d4:	b11b      	cbz	r3, 80041de <frame_dummy+0xe>
 80041d6:	4903      	ldr	r1, [pc, #12]	; (80041e4 <frame_dummy+0x14>)
 80041d8:	4803      	ldr	r0, [pc, #12]	; (80041e8 <frame_dummy+0x18>)
 80041da:	f3af 8000 	nop.w
 80041de:	bd08      	pop	{r3, pc}
 80041e0:	00000000 	.word	0x00000000
 80041e4:	20000084 	.word	0x20000084
 80041e8:	08008950 	.word	0x08008950

080041ec <__aeabi_uldivmod>:
 80041ec:	b953      	cbnz	r3, 8004204 <__aeabi_uldivmod+0x18>
 80041ee:	b94a      	cbnz	r2, 8004204 <__aeabi_uldivmod+0x18>
 80041f0:	2900      	cmp	r1, #0
 80041f2:	bf08      	it	eq
 80041f4:	2800      	cmpeq	r0, #0
 80041f6:	bf1c      	itt	ne
 80041f8:	f04f 31ff 	movne.w	r1, #4294967295
 80041fc:	f04f 30ff 	movne.w	r0, #4294967295
 8004200:	f000 b972 	b.w	80044e8 <__aeabi_idiv0>
 8004204:	f1ad 0c08 	sub.w	ip, sp, #8
 8004208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800420c:	f000 f806 	bl	800421c <__udivmoddi4>
 8004210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004218:	b004      	add	sp, #16
 800421a:	4770      	bx	lr

0800421c <__udivmoddi4>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	9e08      	ldr	r6, [sp, #32]
 8004222:	4604      	mov	r4, r0
 8004224:	4688      	mov	r8, r1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d14b      	bne.n	80042c2 <__udivmoddi4+0xa6>
 800422a:	428a      	cmp	r2, r1
 800422c:	4615      	mov	r5, r2
 800422e:	d967      	bls.n	8004300 <__udivmoddi4+0xe4>
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b14a      	cbz	r2, 800424a <__udivmoddi4+0x2e>
 8004236:	f1c2 0720 	rsb	r7, r2, #32
 800423a:	fa01 f302 	lsl.w	r3, r1, r2
 800423e:	fa20 f707 	lsr.w	r7, r0, r7
 8004242:	4095      	lsls	r5, r2
 8004244:	ea47 0803 	orr.w	r8, r7, r3
 8004248:	4094      	lsls	r4, r2
 800424a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800424e:	0c23      	lsrs	r3, r4, #16
 8004250:	fbb8 f7fe 	udiv	r7, r8, lr
 8004254:	fa1f fc85 	uxth.w	ip, r5
 8004258:	fb0e 8817 	mls	r8, lr, r7, r8
 800425c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004260:	fb07 f10c 	mul.w	r1, r7, ip
 8004264:	4299      	cmp	r1, r3
 8004266:	d909      	bls.n	800427c <__udivmoddi4+0x60>
 8004268:	18eb      	adds	r3, r5, r3
 800426a:	f107 30ff 	add.w	r0, r7, #4294967295
 800426e:	f080 811b 	bcs.w	80044a8 <__udivmoddi4+0x28c>
 8004272:	4299      	cmp	r1, r3
 8004274:	f240 8118 	bls.w	80044a8 <__udivmoddi4+0x28c>
 8004278:	3f02      	subs	r7, #2
 800427a:	442b      	add	r3, r5
 800427c:	1a5b      	subs	r3, r3, r1
 800427e:	b2a4      	uxth	r4, r4
 8004280:	fbb3 f0fe 	udiv	r0, r3, lr
 8004284:	fb0e 3310 	mls	r3, lr, r0, r3
 8004288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800428c:	fb00 fc0c 	mul.w	ip, r0, ip
 8004290:	45a4      	cmp	ip, r4
 8004292:	d909      	bls.n	80042a8 <__udivmoddi4+0x8c>
 8004294:	192c      	adds	r4, r5, r4
 8004296:	f100 33ff 	add.w	r3, r0, #4294967295
 800429a:	f080 8107 	bcs.w	80044ac <__udivmoddi4+0x290>
 800429e:	45a4      	cmp	ip, r4
 80042a0:	f240 8104 	bls.w	80044ac <__udivmoddi4+0x290>
 80042a4:	3802      	subs	r0, #2
 80042a6:	442c      	add	r4, r5
 80042a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80042ac:	eba4 040c 	sub.w	r4, r4, ip
 80042b0:	2700      	movs	r7, #0
 80042b2:	b11e      	cbz	r6, 80042bc <__udivmoddi4+0xa0>
 80042b4:	40d4      	lsrs	r4, r2
 80042b6:	2300      	movs	r3, #0
 80042b8:	e9c6 4300 	strd	r4, r3, [r6]
 80042bc:	4639      	mov	r1, r7
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	428b      	cmp	r3, r1
 80042c4:	d909      	bls.n	80042da <__udivmoddi4+0xbe>
 80042c6:	2e00      	cmp	r6, #0
 80042c8:	f000 80eb 	beq.w	80044a2 <__udivmoddi4+0x286>
 80042cc:	2700      	movs	r7, #0
 80042ce:	e9c6 0100 	strd	r0, r1, [r6]
 80042d2:	4638      	mov	r0, r7
 80042d4:	4639      	mov	r1, r7
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	fab3 f783 	clz	r7, r3
 80042de:	2f00      	cmp	r7, #0
 80042e0:	d147      	bne.n	8004372 <__udivmoddi4+0x156>
 80042e2:	428b      	cmp	r3, r1
 80042e4:	d302      	bcc.n	80042ec <__udivmoddi4+0xd0>
 80042e6:	4282      	cmp	r2, r0
 80042e8:	f200 80fa 	bhi.w	80044e0 <__udivmoddi4+0x2c4>
 80042ec:	1a84      	subs	r4, r0, r2
 80042ee:	eb61 0303 	sbc.w	r3, r1, r3
 80042f2:	2001      	movs	r0, #1
 80042f4:	4698      	mov	r8, r3
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	d0e0      	beq.n	80042bc <__udivmoddi4+0xa0>
 80042fa:	e9c6 4800 	strd	r4, r8, [r6]
 80042fe:	e7dd      	b.n	80042bc <__udivmoddi4+0xa0>
 8004300:	b902      	cbnz	r2, 8004304 <__udivmoddi4+0xe8>
 8004302:	deff      	udf	#255	; 0xff
 8004304:	fab2 f282 	clz	r2, r2
 8004308:	2a00      	cmp	r2, #0
 800430a:	f040 808f 	bne.w	800442c <__udivmoddi4+0x210>
 800430e:	1b49      	subs	r1, r1, r5
 8004310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004314:	fa1f f885 	uxth.w	r8, r5
 8004318:	2701      	movs	r7, #1
 800431a:	fbb1 fcfe 	udiv	ip, r1, lr
 800431e:	0c23      	lsrs	r3, r4, #16
 8004320:	fb0e 111c 	mls	r1, lr, ip, r1
 8004324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004328:	fb08 f10c 	mul.w	r1, r8, ip
 800432c:	4299      	cmp	r1, r3
 800432e:	d907      	bls.n	8004340 <__udivmoddi4+0x124>
 8004330:	18eb      	adds	r3, r5, r3
 8004332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8004336:	d202      	bcs.n	800433e <__udivmoddi4+0x122>
 8004338:	4299      	cmp	r1, r3
 800433a:	f200 80cd 	bhi.w	80044d8 <__udivmoddi4+0x2bc>
 800433e:	4684      	mov	ip, r0
 8004340:	1a59      	subs	r1, r3, r1
 8004342:	b2a3      	uxth	r3, r4
 8004344:	fbb1 f0fe 	udiv	r0, r1, lr
 8004348:	fb0e 1410 	mls	r4, lr, r0, r1
 800434c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004350:	fb08 f800 	mul.w	r8, r8, r0
 8004354:	45a0      	cmp	r8, r4
 8004356:	d907      	bls.n	8004368 <__udivmoddi4+0x14c>
 8004358:	192c      	adds	r4, r5, r4
 800435a:	f100 33ff 	add.w	r3, r0, #4294967295
 800435e:	d202      	bcs.n	8004366 <__udivmoddi4+0x14a>
 8004360:	45a0      	cmp	r8, r4
 8004362:	f200 80b6 	bhi.w	80044d2 <__udivmoddi4+0x2b6>
 8004366:	4618      	mov	r0, r3
 8004368:	eba4 0408 	sub.w	r4, r4, r8
 800436c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004370:	e79f      	b.n	80042b2 <__udivmoddi4+0x96>
 8004372:	f1c7 0c20 	rsb	ip, r7, #32
 8004376:	40bb      	lsls	r3, r7
 8004378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800437c:	ea4e 0e03 	orr.w	lr, lr, r3
 8004380:	fa01 f407 	lsl.w	r4, r1, r7
 8004384:	fa20 f50c 	lsr.w	r5, r0, ip
 8004388:	fa21 f30c 	lsr.w	r3, r1, ip
 800438c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004390:	4325      	orrs	r5, r4
 8004392:	fbb3 f9f8 	udiv	r9, r3, r8
 8004396:	0c2c      	lsrs	r4, r5, #16
 8004398:	fb08 3319 	mls	r3, r8, r9, r3
 800439c:	fa1f fa8e 	uxth.w	sl, lr
 80043a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80043a4:	fb09 f40a 	mul.w	r4, r9, sl
 80043a8:	429c      	cmp	r4, r3
 80043aa:	fa02 f207 	lsl.w	r2, r2, r7
 80043ae:	fa00 f107 	lsl.w	r1, r0, r7
 80043b2:	d90b      	bls.n	80043cc <__udivmoddi4+0x1b0>
 80043b4:	eb1e 0303 	adds.w	r3, lr, r3
 80043b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80043bc:	f080 8087 	bcs.w	80044ce <__udivmoddi4+0x2b2>
 80043c0:	429c      	cmp	r4, r3
 80043c2:	f240 8084 	bls.w	80044ce <__udivmoddi4+0x2b2>
 80043c6:	f1a9 0902 	sub.w	r9, r9, #2
 80043ca:	4473      	add	r3, lr
 80043cc:	1b1b      	subs	r3, r3, r4
 80043ce:	b2ad      	uxth	r5, r5
 80043d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80043d4:	fb08 3310 	mls	r3, r8, r0, r3
 80043d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80043dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80043e0:	45a2      	cmp	sl, r4
 80043e2:	d908      	bls.n	80043f6 <__udivmoddi4+0x1da>
 80043e4:	eb1e 0404 	adds.w	r4, lr, r4
 80043e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043ec:	d26b      	bcs.n	80044c6 <__udivmoddi4+0x2aa>
 80043ee:	45a2      	cmp	sl, r4
 80043f0:	d969      	bls.n	80044c6 <__udivmoddi4+0x2aa>
 80043f2:	3802      	subs	r0, #2
 80043f4:	4474      	add	r4, lr
 80043f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80043fa:	fba0 8902 	umull	r8, r9, r0, r2
 80043fe:	eba4 040a 	sub.w	r4, r4, sl
 8004402:	454c      	cmp	r4, r9
 8004404:	46c2      	mov	sl, r8
 8004406:	464b      	mov	r3, r9
 8004408:	d354      	bcc.n	80044b4 <__udivmoddi4+0x298>
 800440a:	d051      	beq.n	80044b0 <__udivmoddi4+0x294>
 800440c:	2e00      	cmp	r6, #0
 800440e:	d069      	beq.n	80044e4 <__udivmoddi4+0x2c8>
 8004410:	ebb1 050a 	subs.w	r5, r1, sl
 8004414:	eb64 0403 	sbc.w	r4, r4, r3
 8004418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800441c:	40fd      	lsrs	r5, r7
 800441e:	40fc      	lsrs	r4, r7
 8004420:	ea4c 0505 	orr.w	r5, ip, r5
 8004424:	e9c6 5400 	strd	r5, r4, [r6]
 8004428:	2700      	movs	r7, #0
 800442a:	e747      	b.n	80042bc <__udivmoddi4+0xa0>
 800442c:	f1c2 0320 	rsb	r3, r2, #32
 8004430:	fa20 f703 	lsr.w	r7, r0, r3
 8004434:	4095      	lsls	r5, r2
 8004436:	fa01 f002 	lsl.w	r0, r1, r2
 800443a:	fa21 f303 	lsr.w	r3, r1, r3
 800443e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004442:	4338      	orrs	r0, r7
 8004444:	0c01      	lsrs	r1, r0, #16
 8004446:	fbb3 f7fe 	udiv	r7, r3, lr
 800444a:	fa1f f885 	uxth.w	r8, r5
 800444e:	fb0e 3317 	mls	r3, lr, r7, r3
 8004452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004456:	fb07 f308 	mul.w	r3, r7, r8
 800445a:	428b      	cmp	r3, r1
 800445c:	fa04 f402 	lsl.w	r4, r4, r2
 8004460:	d907      	bls.n	8004472 <__udivmoddi4+0x256>
 8004462:	1869      	adds	r1, r5, r1
 8004464:	f107 3cff 	add.w	ip, r7, #4294967295
 8004468:	d22f      	bcs.n	80044ca <__udivmoddi4+0x2ae>
 800446a:	428b      	cmp	r3, r1
 800446c:	d92d      	bls.n	80044ca <__udivmoddi4+0x2ae>
 800446e:	3f02      	subs	r7, #2
 8004470:	4429      	add	r1, r5
 8004472:	1acb      	subs	r3, r1, r3
 8004474:	b281      	uxth	r1, r0
 8004476:	fbb3 f0fe 	udiv	r0, r3, lr
 800447a:	fb0e 3310 	mls	r3, lr, r0, r3
 800447e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004482:	fb00 f308 	mul.w	r3, r0, r8
 8004486:	428b      	cmp	r3, r1
 8004488:	d907      	bls.n	800449a <__udivmoddi4+0x27e>
 800448a:	1869      	adds	r1, r5, r1
 800448c:	f100 3cff 	add.w	ip, r0, #4294967295
 8004490:	d217      	bcs.n	80044c2 <__udivmoddi4+0x2a6>
 8004492:	428b      	cmp	r3, r1
 8004494:	d915      	bls.n	80044c2 <__udivmoddi4+0x2a6>
 8004496:	3802      	subs	r0, #2
 8004498:	4429      	add	r1, r5
 800449a:	1ac9      	subs	r1, r1, r3
 800449c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80044a0:	e73b      	b.n	800431a <__udivmoddi4+0xfe>
 80044a2:	4637      	mov	r7, r6
 80044a4:	4630      	mov	r0, r6
 80044a6:	e709      	b.n	80042bc <__udivmoddi4+0xa0>
 80044a8:	4607      	mov	r7, r0
 80044aa:	e6e7      	b.n	800427c <__udivmoddi4+0x60>
 80044ac:	4618      	mov	r0, r3
 80044ae:	e6fb      	b.n	80042a8 <__udivmoddi4+0x8c>
 80044b0:	4541      	cmp	r1, r8
 80044b2:	d2ab      	bcs.n	800440c <__udivmoddi4+0x1f0>
 80044b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80044b8:	eb69 020e 	sbc.w	r2, r9, lr
 80044bc:	3801      	subs	r0, #1
 80044be:	4613      	mov	r3, r2
 80044c0:	e7a4      	b.n	800440c <__udivmoddi4+0x1f0>
 80044c2:	4660      	mov	r0, ip
 80044c4:	e7e9      	b.n	800449a <__udivmoddi4+0x27e>
 80044c6:	4618      	mov	r0, r3
 80044c8:	e795      	b.n	80043f6 <__udivmoddi4+0x1da>
 80044ca:	4667      	mov	r7, ip
 80044cc:	e7d1      	b.n	8004472 <__udivmoddi4+0x256>
 80044ce:	4681      	mov	r9, r0
 80044d0:	e77c      	b.n	80043cc <__udivmoddi4+0x1b0>
 80044d2:	3802      	subs	r0, #2
 80044d4:	442c      	add	r4, r5
 80044d6:	e747      	b.n	8004368 <__udivmoddi4+0x14c>
 80044d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80044dc:	442b      	add	r3, r5
 80044de:	e72f      	b.n	8004340 <__udivmoddi4+0x124>
 80044e0:	4638      	mov	r0, r7
 80044e2:	e708      	b.n	80042f6 <__udivmoddi4+0xda>
 80044e4:	4637      	mov	r7, r6
 80044e6:	e6e9      	b.n	80042bc <__udivmoddi4+0xa0>

080044e8 <__aeabi_idiv0>:
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80044f0:	f000 febe 	bl	8005270 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80044f4:	f000 f84e 	bl	8004594 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80044f8:	f000 f960 	bl	80047bc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80044fc:	f000 f934 	bl	8004768 <MX_USART1_UART_Init>
	MX_CAN1_Init();
 8004500:	f000 f8ba 	bl	8004678 <MX_CAN1_Init>
	MX_RTC_Init();
 8004504:	f000 f90a 	bl	800471c <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 8004508:	481b      	ldr	r0, [pc, #108]	; (8004578 <main+0x8c>)
 800450a:	f001 f921 	bl	8005750 <HAL_CAN_Start>
	printf("Bootloader Started\r\n");
 800450e:	481b      	ldr	r0, [pc, #108]	; (800457c <main+0x90>)
 8004510:	f003 fe12 	bl	8008138 <puts>
		/* USER CODE BEGIN 3 */
		//switch case to the mode of boot-loader
		//mode 1: no application is found so load the application to bank1 without bank swapping
		//mode 2: error in application occurs
		//printf("reading rtc register 1\r\n");
		switch (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)) {
 8004514:	2101      	movs	r1, #1
 8004516:	481a      	ldr	r0, [pc, #104]	; (8004580 <main+0x94>)
 8004518:	f003 fa3e 	bl	8007998 <HAL_RTCEx_BKUPRead>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <main+0x3c>
 8004522:	2b01      	cmp	r3, #1
 8004524:	d014      	beq.n	8004550 <main+0x64>
 8004526:	e7f5      	b.n	8004514 <main+0x28>
		case 0:
			// Receive Can Frame and process it.
			printf("Bootloader normal MODE\r\n");
 8004528:	4816      	ldr	r0, [pc, #88]	; (8004584 <main+0x98>)
 800452a:	f003 fe05 	bl	8008138 <puts>
			while (1) {
				while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0) {
 800452e:	bf00      	nop
 8004530:	2100      	movs	r1, #0
 8004532:	4811      	ldr	r0, [pc, #68]	; (8004578 <main+0x8c>)
 8004534:	f001 fb3d 	bl	8005bb2 <HAL_CAN_GetRxFifoFillLevel>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f8      	beq.n	8004530 <main+0x44>
				};
				HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <main+0x9c>)
 8004540:	4a12      	ldr	r2, [pc, #72]	; (800458c <main+0xa0>)
 8004542:	2100      	movs	r1, #0
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <main+0x8c>)
 8004546:	f001 fa22 	bl	800598e <HAL_CAN_GetRxMessage>
				bootloader_can_read_data();
 800454a:	f000 faf3 	bl	8004b34 <bootloader_can_read_data>
				while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) == 0) {
 800454e:	e7ee      	b.n	800452e <main+0x42>
			}
			//sendHeartbeat();
			break;
		case 1:
			printf("OS FAILED\r\n");
 8004550:	480f      	ldr	r0, [pc, #60]	; (8004590 <main+0xa4>)
 8004552:	f003 fdf1 	bl	8008138 <puts>
			HAL_Delay(1000);
 8004556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800455a:	f000 fefb 	bl	8005354 <HAL_Delay>
			HAL_PWR_EnableBkUpAccess();
 800455e:	f002 fa8d 	bl	8006a7c <HAL_PWR_EnableBkUpAccess>
			// Writes a data in a RTC Backup data Register 1
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004562:	2200      	movs	r2, #0
 8004564:	2100      	movs	r1, #0
 8004566:	4806      	ldr	r0, [pc, #24]	; (8004580 <main+0x94>)
 8004568:	f003 f9fc 	bl	8007964 <HAL_RTCEx_BKUPWrite>
			HAL_PWR_DisableBkUpAccess();
 800456c:	f002 fa9a 	bl	8006aa4 <HAL_PWR_DisableBkUpAccess>
			toggleBankAndReset();
 8004570:	f000 f97e 	bl	8004870 <toggleBankAndReset>
			break;
 8004574:	bf00      	nop
		switch (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)) {
 8004576:	e7cd      	b.n	8004514 <main+0x28>
 8004578:	20000124 	.word	0x20000124
 800457c:	08008968 	.word	0x08008968
 8004580:	200000f0 	.word	0x200000f0
 8004584:	0800897c 	.word	0x0800897c
 8004588:	2000011c 	.word	0x2000011c
 800458c:	20000164 	.word	0x20000164
 8004590:	08008994 	.word	0x08008994

08004594 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b094      	sub	sp, #80	; 0x50
 8004598:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800459a:	f107 0320 	add.w	r3, r7, #32
 800459e:	2230      	movs	r2, #48	; 0x30
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f003 fd64 	bl	8008070 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80045a8:	f107 030c 	add.w	r3, r7, #12
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <SystemClock_Config+0xdc>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <SystemClock_Config+0xdc>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b29      	ldr	r3, [pc, #164]	; (8004670 <SystemClock_Config+0xdc>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <SystemClock_Config+0xe0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a25      	ldr	r2, [pc, #148]	; (8004674 <SystemClock_Config+0xe0>)
 80045de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b23      	ldr	r3, [pc, #140]	; (8004674 <SystemClock_Config+0xe0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80045f0:	230a      	movs	r3, #10
 80045f2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045f4:	2301      	movs	r3, #1
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045f8:	2310      	movs	r3, #16
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80045fc:	2301      	movs	r3, #1
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004600:	2302      	movs	r3, #2
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004604:	2300      	movs	r3, #0
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004608:	2308      	movs	r3, #8
 800460a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800460c:	23b4      	movs	r3, #180	; 0xb4
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004610:	2302      	movs	r3, #2
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004614:	2304      	movs	r3, #4
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004618:	f107 0320 	add.w	r3, r7, #32
 800461c:	4618      	mov	r0, r3
 800461e:	f002 faa5 	bl	8006b6c <HAL_RCC_OscConfig>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <SystemClock_Config+0x98>
		Error_Handler();
 8004628:	f000 f91e 	bl	8004868 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800462c:	f002 fa4e 	bl	8006acc <HAL_PWREx_EnableOverDrive>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <SystemClock_Config+0xa6>
		Error_Handler();
 8004636:	f000 f917 	bl	8004868 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800463a:	230f      	movs	r3, #15
 800463c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800463e:	2302      	movs	r3, #2
 8004640:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800464a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800464c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004650:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8004652:	f107 030c 	add.w	r3, r7, #12
 8004656:	2105      	movs	r1, #5
 8004658:	4618      	mov	r0, r3
 800465a:	f002 fcff 	bl	800705c <HAL_RCC_ClockConfig>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <SystemClock_Config+0xd4>
		Error_Handler();
 8004664:	f000 f900 	bl	8004868 <Error_Handler>
	}
}
 8004668:	bf00      	nop
 800466a:	3750      	adds	r7, #80	; 0x50
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	40007000 	.word	0x40007000

08004678 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <MX_CAN1_Init+0x9c>)
 8004680:	4a25      	ldr	r2, [pc, #148]	; (8004718 <MX_CAN1_Init+0xa0>)
 8004682:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 18;
 8004684:	4b23      	ldr	r3, [pc, #140]	; (8004714 <MX_CAN1_Init+0x9c>)
 8004686:	2212      	movs	r2, #18
 8004688:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <MX_CAN1_Init+0x9c>)
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <MX_CAN1_Init+0x9c>)
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8004696:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <MX_CAN1_Init+0x9c>)
 8004698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800469c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046a4:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80046b2:	4b18      	ldr	r3, [pc, #96]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80046b8:	4b16      	ldr	r3, [pc, #88]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80046ca:	4812      	ldr	r0, [pc, #72]	; (8004714 <MX_CAN1_Init+0x9c>)
 80046cc:	f000 fe64 	bl	8005398 <HAL_CAN_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_CAN1_Init+0x62>
		Error_Handler();
 80046d6:	f000 f8c7 	bl	8004868 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80046da:	2301      	movs	r3, #1
 80046dc:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;
 80046de:	2312      	movs	r3, #18
 80046e0:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;
 80046fe:	2314      	movs	r3, #20
 8004700:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8004702:	463b      	mov	r3, r7
 8004704:	4619      	mov	r1, r3
 8004706:	4803      	ldr	r0, [pc, #12]	; (8004714 <MX_CAN1_Init+0x9c>)
 8004708:	f000 ff42 	bl	8005590 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN1_Init 2 */

}
 800470c:	bf00      	nop
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000124 	.word	0x20000124
 8004718:	40006400 	.word	0x40006400

0800471c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <MX_RTC_Init+0x44>)
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <MX_RTC_Init+0x48>)
 8004724:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <MX_RTC_Init+0x44>)
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <MX_RTC_Init+0x44>)
 800472e:	227f      	movs	r2, #127	; 0x7f
 8004730:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <MX_RTC_Init+0x44>)
 8004734:	22ff      	movs	r2, #255	; 0xff
 8004736:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <MX_RTC_Init+0x44>)
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800473e:	4b08      	ldr	r3, [pc, #32]	; (8004760 <MX_RTC_Init+0x44>)
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <MX_RTC_Init+0x44>)
 8004746:	2200      	movs	r2, #0
 8004748:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800474a:	4805      	ldr	r0, [pc, #20]	; (8004760 <MX_RTC_Init+0x44>)
 800474c:	f003 f810 	bl	8007770 <HAL_RTC_Init>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_RTC_Init+0x3e>
		Error_Handler();
 8004756:	f000 f887 	bl	8004868 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200000f0 	.word	0x200000f0
 8004764:	40002800 	.word	0x40002800

08004768 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <MX_USART1_UART_Init+0x50>)
 8004770:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004772:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 8004774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004778:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 8004782:	2200      	movs	r2, #0
 8004784:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 8004788:	2200      	movs	r2, #0
 800478a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 800478e:	220c      	movs	r2, #12
 8004790:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 800479a:	2200      	movs	r2, #0
 800479c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800479e:	4805      	ldr	r0, [pc, #20]	; (80047b4 <MX_USART1_UART_Init+0x4c>)
 80047a0:	f003 f912 	bl	80079c8 <HAL_UART_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80047aa:	f000 f85d 	bl	8004868 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200000ac 	.word	0x200000ac
 80047b8:	40011000 	.word	0x40011000

080047bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	609a      	str	r2, [r3, #8]
 80047ce:	60da      	str	r2, [r3, #12]
 80047d0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <MX_GPIO_Init+0x80>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a18      	ldr	r2, [pc, #96]	; (800483c <MX_GPIO_Init+0x80>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	4b16      	ldr	r3, [pc, #88]	; (800483c <MX_GPIO_Init+0x80>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <MX_GPIO_Init+0x80>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a11      	ldr	r2, [pc, #68]	; (800483c <MX_GPIO_Init+0x80>)
 80047f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <MX_GPIO_Init+0x80>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 800480a:	2200      	movs	r2, #0
 800480c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004810:	480b      	ldr	r0, [pc, #44]	; (8004840 <MX_GPIO_Init+0x84>)
 8004812:	f002 f8ff 	bl	8006a14 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8004816:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800481a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800481c:	2301      	movs	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4619      	mov	r1, r3
 800482e:	4804      	ldr	r0, [pc, #16]	; (8004840 <MX_GPIO_Init+0x84>)
 8004830:	f001 ff46 	bl	80066c0 <HAL_GPIO_Init>

}
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	40021800 	.word	0x40021800

08004844 <__io_putchar>:
 set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the UART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800484c:	1d39      	adds	r1, r7, #4
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	2201      	movs	r2, #1
 8004854:	4803      	ldr	r0, [pc, #12]	; (8004864 <__io_putchar+0x20>)
 8004856:	f003 f904 	bl	8007a62 <HAL_UART_Transmit>
	return ch;
 800485a:	687b      	ldr	r3, [r7, #4]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200000ac 	.word	0x200000ac

08004868 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800486c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800486e:	e7fe      	b.n	800486e <Error_Handler+0x6>

08004870 <toggleBankAndReset>:
extern CAN_TxHeaderTypeDef TxHeader;
extern uint32_t TxMailbox;
extern uint8_t RxData[8];
extern uint8_t TxData[8];

void toggleBankAndReset() {
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
	FLASH_AdvOBProgramInitTypeDef OBInit;
	HAL_FLASH_Unlock();
 8004876:	f001 fb17 	bl	8005ea8 <HAL_FLASH_Unlock>
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
	HAL_FLASH_OB_Unlock();
 800487a:	f001 fb47 	bl	8005f0c <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_AdvOBGetConfig(&OBInit);
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fd71 	bl	8006368 <HAL_FLASHEx_AdvOBGetConfig>
	OBInit.OptionType = OPTIONBYTE_BOOTCONFIG;
 8004886:	2302      	movs	r3, #2
 8004888:	607b      	str	r3, [r7, #4]

	if (((OBInit.BootConfig) & (OB_DUAL_BOOT_ENABLE)) == OB_DUAL_BOOT_ENABLE) {
 800488a:	7d3b      	ldrb	r3, [r7, #20]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <toggleBankAndReset+0x2a>
		OBInit.BootConfig = OB_DUAL_BOOT_DISABLE;
 8004894:	2300      	movs	r3, #0
 8004896:	753b      	strb	r3, [r7, #20]
 8004898:	e001      	b.n	800489e <toggleBankAndReset+0x2e>
	} else {
		OBInit.BootConfig = OB_DUAL_BOOT_ENABLE;
 800489a:	2310      	movs	r3, #16
 800489c:	753b      	strb	r3, [r7, #20]
	}
	if (HAL_FLASHEx_AdvOBProgram(&OBInit) != HAL_OK) {
 800489e:	1d3b      	adds	r3, r7, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fd23 	bl	80062ec <HAL_FLASHEx_AdvOBProgram>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <toggleBankAndReset+0x50>

		while (1) {
			HAL_Delay(1000);
 80048ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b0:	f000 fd50 	bl	8005354 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80048b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048b8:	480d      	ldr	r0, [pc, #52]	; (80048f0 <toggleBankAndReset+0x80>)
 80048ba:	f002 f8c4 	bl	8006a46 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 80048be:	e7f5      	b.n	80048ac <toggleBankAndReset+0x3c>
		}
	}
	if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80048c0:	f001 fb50 	bl	8005f64 <HAL_FLASH_OB_Launch>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <toggleBankAndReset+0x6c>

		while (1) {
			HAL_Delay(100);
 80048ca:	2064      	movs	r0, #100	; 0x64
 80048cc:	f000 fd42 	bl	8005354 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80048d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048d4:	4806      	ldr	r0, [pc, #24]	; (80048f0 <toggleBankAndReset+0x80>)
 80048d6:	f002 f8b6 	bl	8006a46 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80048da:	e7f6      	b.n	80048ca <toggleBankAndReset+0x5a>
		}
	}
	HAL_FLASH_OB_Lock();
 80048dc:	f001 fb32 	bl	8005f44 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80048e0:	f001 fb04 	bl	8005eec <HAL_FLASH_Lock>
	HAL_NVIC_SystemReset();
 80048e4:	f001 fa7b 	bl	8005dde <HAL_NVIC_SystemReset>

}
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021800 	.word	0x40021800

080048f4 <get_Active_Bank_no>:

uint32_t get_Active_Bank_no(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
	uint32_t checkBank = READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_UFB_MODE);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <get_Active_Bank_no+0x30>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	607b      	str	r3, [r7, #4]
	if (checkBank == 0) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <get_Active_Bank_no+0x1e>
		printf("Program Running in Bank 1 \r\n");
 800490a:	4807      	ldr	r0, [pc, #28]	; (8004928 <get_Active_Bank_no+0x34>)
 800490c:	f003 fc14 	bl	8008138 <puts>
 8004910:	e002      	b.n	8004918 <get_Active_Bank_no+0x24>
	} else {
		printf("Program Running in Bank 2 \r\n");
 8004912:	4806      	ldr	r0, [pc, #24]	; (800492c <get_Active_Bank_no+0x38>)
 8004914:	f003 fc10 	bl	8008138 <puts>
	}
	return checkBank;
 8004918:	687b      	ldr	r3, [r7, #4]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40013800 	.word	0x40013800
 8004928:	080089bc 	.word	0x080089bc
 800492c:	080089d8 	.word	0x080089d8

08004930 <bootloader_handle_gethelp_cmd>:
 *****************************************************************************************/

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
	TxHeader.StdId = BL_GET_HELP;
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <bootloader_handle_gethelp_cmd+0x40>)
 8004938:	2248      	movs	r2, #72	; 0x48
 800493a:	601a      	str	r2, [r3, #0]

	for (uint32_t i = 0; i < 5; i++) {
 800493c:	2300      	movs	r3, #0
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	e00b      	b.n	800495a <bootloader_handle_gethelp_cmd+0x2a>
		TxData[i] = supported_commands[i];
 8004942:	4a0c      	ldr	r2, [pc, #48]	; (8004974 <bootloader_handle_gethelp_cmd+0x44>)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4413      	add	r3, r2
 8004948:	7819      	ldrb	r1, [r3, #0]
 800494a:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <bootloader_handle_gethelp_cmd+0x48>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	460a      	mov	r2, r1
 8004952:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 5; i++) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3301      	adds	r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d9f0      	bls.n	8004942 <bootloader_handle_gethelp_cmd+0x12>
	}

	//send the supported commands to the node_mcu
	bootloader_can_write_data(1);
 8004960:	2001      	movs	r0, #1
 8004962:	f000 f91d 	bl	8004ba0 <bootloader_can_write_data>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	2000014c 	.word	0x2000014c
 8004974:	20000000 	.word	0x20000000
 8004978:	20000110 	.word	0x20000110

0800497c <bootloader_handle_getver_cmd>:

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(void) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
	uint8_t app_version = 99;
 8004982:	2363      	movs	r3, #99	; 0x63
 8004984:	71fb      	strb	r3, [r7, #7]

	app_version = get_app_version();
 8004986:	f000 f935 	bl	8004bf4 <get_app_version>
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]

	TxHeader.StdId = BL_GET_VER;
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <bootloader_handle_getver_cmd+0x2c>)
 8004990:	2251      	movs	r2, #81	; 0x51
 8004992:	601a      	str	r2, [r3, #0]

	TxData[0] = app_version;
 8004994:	4a05      	ldr	r2, [pc, #20]	; (80049ac <bootloader_handle_getver_cmd+0x30>)
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	7013      	strb	r3, [r2, #0]

	bootloader_can_write_data(1);
 800499a:	2001      	movs	r0, #1
 800499c:	f000 f900 	bl	8004ba0 <bootloader_can_write_data>
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	2000014c 	.word	0x2000014c
 80049ac:	20000110 	.word	0x20000110

080049b0 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(void) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
	TxHeader.StdId = BL_GO_TO_ADDR;
 80049b6:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <bootloader_handle_go_cmd+0x60>)
 80049b8:	2255      	movs	r2, #85	; 0x55
 80049ba:	601a      	str	r2, [r3, #0]

	uint8_t VERIFICATION_ADDRESS = (uint8_t) ADDR_INVALID;
 80049bc:	2301      	movs	r3, #1
 80049be:	75fb      	strb	r3, [r7, #23]

	uint32_t *ptr_address = &RxData;
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <bootloader_handle_go_cmd+0x64>)
 80049c2:	613b      	str	r3, [r7, #16]

	uint32_t address = *(ptr_address);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]

	VERIFICATION_ADDRESS = verify_address(address);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f91a 	bl	8004c04 <verify_address>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]

	if (VERIFICATION_ADDRESS == (uint8_t) ADDR_VALID) {
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <bootloader_handle_go_cmd+0x4a>
		TxData[0] = (uint8_t) VERIFICATION_ADDRESS;
 80049da:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <bootloader_handle_go_cmd+0x68>)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	7013      	strb	r3, [r2, #0]

		//tell node_mcu that address is fine
		bootloader_can_write_data(1);
 80049e0:	2001      	movs	r0, #1
 80049e2:	f000 f8dd 	bl	8004ba0 <bootloader_can_write_data>
		 host must ensure that valid code is present over there
		 Its not the duty of bootloader. so just trust and jump */

		/* Not doing the below line will result in hardfault exception for ARM cortex M */
		//watch : https://www.youtube.com/watch?v=VX_12SjnNhY
		uint32_t go_address = address;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	60bb      	str	r3, [r7, #8]

		go_address += 1; //make T bit =1
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]

		void (*lets_jump)(void) = (void *)go_address;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	607b      	str	r3, [r7, #4]

		lets_jump();
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4798      	blx	r3
		TxData[0] = (uint8_t) VERIFICATION_ADDRESS;

		//tell host that address is invalid
		bootloader_can_write_data(1);
	}
}
 80049f8:	e005      	b.n	8004a06 <bootloader_handle_go_cmd+0x56>
		TxData[0] = (uint8_t) VERIFICATION_ADDRESS;
 80049fa:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <bootloader_handle_go_cmd+0x68>)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	7013      	strb	r3, [r2, #0]
		bootloader_can_write_data(1);
 8004a00:	2001      	movs	r0, #1
 8004a02:	f000 f8cd 	bl	8004ba0 <bootloader_can_write_data>
}
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000014c 	.word	0x2000014c
 8004a14:	2000011c 	.word	0x2000011c
 8004a18:	20000110 	.word	0x20000110

08004a1c <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(void) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
	uint8_t ERASE_STATUS = (uint8_t) FLASH_ERASE_FAILED;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]

	uint32_t *ptr = &RxData;
 8004a26:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <bootloader_handle_flash_erase_cmd+0x58>)
 8004a28:	60bb      	str	r3, [r7, #8]
	uint32_t initial_sector = *(ptr);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	607b      	str	r3, [r7, #4]
	uint32_t number_of_sectors = *(ptr + 1);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	603b      	str	r3, [r7, #0]

	ERASE_STATUS = execute_flash_erase(initial_sector, number_of_sectors);
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f927 	bl	8004c8c <execute_flash_erase>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	73fb      	strb	r3, [r7, #15]

	TxHeader.StdId = BL_FLASH_ERASE;
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <bootloader_handle_flash_erase_cmd+0x5c>)
 8004a44:	2256      	movs	r2, #86	; 0x56
 8004a46:	601a      	str	r2, [r3, #0]

	if (ERASE_STATUS == (uint8_t) FLASH_ERASE_SUCCESS) {
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <bootloader_handle_flash_erase_cmd+0x3a>
		TxData[0] = (uint8_t) FLASH_ERASE_SUCCESS;
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <bootloader_handle_flash_erase_cmd+0x60>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
	} else {
		TxData[0] = (uint8_t) INVALID_SECTOR;
	}

	//bootloader_can_write_data(1);
}
 8004a54:	e009      	b.n	8004a6a <bootloader_handle_flash_erase_cmd+0x4e>
	} else if (ERASE_STATUS == (uint8_t) FLASH_ERASE_FAILED) {
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d103      	bne.n	8004a64 <bootloader_handle_flash_erase_cmd+0x48>
		TxData[0] = (uint8_t) FLASH_ERASE_FAILED;
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <bootloader_handle_flash_erase_cmd+0x60>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
}
 8004a62:	e002      	b.n	8004a6a <bootloader_handle_flash_erase_cmd+0x4e>
		TxData[0] = (uint8_t) INVALID_SECTOR;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <bootloader_handle_flash_erase_cmd+0x60>)
 8004a66:	2212      	movs	r2, #18
 8004a68:	701a      	strb	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000011c 	.word	0x2000011c
 8004a78:	2000014c 	.word	0x2000014c
 8004a7c:	20000110 	.word	0x20000110

08004a80 <bootloader_handle_mem_write_size_cmd>:

void bootloader_handle_mem_write_size_cmd(void) {
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
	uint16_t *ptr_size = &RxData;
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <bootloader_handle_mem_write_size_cmd+0x20>)
 8004a88:	607b      	str	r3, [r7, #4]

	SIZE = *(ptr_size);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <bootloader_handle_mem_write_size_cmd+0x24>)
 8004a90:	801a      	strh	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	2000011c 	.word	0x2000011c
 8004aa4:	20000180 	.word	0x20000180

08004aa8 <bootloader_handle_mem_write_address_cmd>:

void bootloader_handle_mem_write_address_cmd(void) {
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
	uint32_t *ptr_address = &RxData;
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <bootloader_handle_mem_write_address_cmd+0x20>)
 8004ab0:	607b      	str	r3, [r7, #4]

	ADDRESS = *(ptr_address);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <bootloader_handle_mem_write_address_cmd+0x24>)
 8004ab8:	6013      	str	r3, [r2, #0]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	2000011c 	.word	0x2000011c
 8004acc:	20000008 	.word	0x20000008

08004ad0 <bootloader_handle_mem_write_data_cmd>:

/*Helper function to handle BL_MEM_WRITE_DATA command */
void bootloader_handle_mem_write_data_cmd() {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	uint8_t WRITE_STATUS = (uint8_t) FLASH_WRITE_FAILED;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t VERIFICATION_ADDRESS = (uint8_t) ADDR_INVALID;
 8004ada:	2301      	movs	r3, #1
 8004adc:	71bb      	strb	r3, [r7, #6]
	TxHeader.StdId = BL_MEM_WRITE_DATA;
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <bootloader_handle_mem_write_data_cmd+0x58>)
 8004ae0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004ae4:	601a      	str	r2, [r3, #0]
	uint32_t mem_address = ADDRESS;
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <bootloader_handle_mem_write_data_cmd+0x5c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	603b      	str	r3, [r7, #0]
	VERIFICATION_ADDRESS = verify_address(mem_address);
 8004aec:	6838      	ldr	r0, [r7, #0]
 8004aee:	f000 f889 	bl	8004c04 <verify_address>
 8004af2:	4603      	mov	r3, r0
 8004af4:	71bb      	strb	r3, [r7, #6]
	if (VERIFICATION_ADDRESS == (uint8_t) ADDR_VALID) {
 8004af6:	79bb      	ldrb	r3, [r7, #6]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10e      	bne.n	8004b1a <bootloader_handle_mem_write_data_cmd+0x4a>
		//execute mem write
		WRITE_STATUS = execute_mem_write();
 8004afc:	f000 f90e 	bl	8004d1c <execute_mem_write>
 8004b00:	4603      	mov	r3, r0
 8004b02:	71fb      	strb	r3, [r7, #7]
		if (WRITE_STATUS == (uint8_t) FLASH_WRITE_SUCCESS) {
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <bootloader_handle_mem_write_data_cmd+0x42>
			TxData[0] = (uint8_t) FLASH_WRITE_SUCCESS;
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <bootloader_handle_mem_write_data_cmd+0x60>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
	} else {
		TxData[0] = (uint8_t) ADDR_INVALID;
	}
	//inform host about the status
	//bootloader_can_write_data(1);
}
 8004b10:	e006      	b.n	8004b20 <bootloader_handle_mem_write_data_cmd+0x50>
			TxData[0] = (uint8_t) FLASH_WRITE_FAILED;
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <bootloader_handle_mem_write_data_cmd+0x60>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
}
 8004b18:	e002      	b.n	8004b20 <bootloader_handle_mem_write_data_cmd+0x50>
		TxData[0] = (uint8_t) ADDR_INVALID;
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <bootloader_handle_mem_write_data_cmd+0x60>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	2000014c 	.word	0x2000014c
 8004b2c:	20000008 	.word	0x20000008
 8004b30:	20000110 	.word	0x20000110

08004b34 <bootloader_can_read_data>:

/* USER CODE BEGIN 4 */
/* This function read the data from can1 */
void bootloader_can_read_data() {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
	switch (RxHeader.StdId) {
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <bootloader_can_read_data+0x68>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b56      	cmp	r3, #86	; 0x56
 8004b3e:	d018      	beq.n	8004b72 <bootloader_can_read_data+0x3e>
 8004b40:	2b56      	cmp	r3, #86	; 0x56
 8004b42:	d806      	bhi.n	8004b52 <bootloader_can_read_data+0x1e>
 8004b44:	2b51      	cmp	r3, #81	; 0x51
 8004b46:	d011      	beq.n	8004b6c <bootloader_can_read_data+0x38>
 8004b48:	2b55      	cmp	r3, #85	; 0x55
 8004b4a:	d01e      	beq.n	8004b8a <bootloader_can_read_data+0x56>
 8004b4c:	2b48      	cmp	r3, #72	; 0x48
 8004b4e:	d00a      	beq.n	8004b66 <bootloader_can_read_data+0x32>
		break;
	case FIRMWARE_OVER_THE_AIR:
		UpdateAPP();
		break;
	}
}
 8004b50:	e021      	b.n	8004b96 <bootloader_can_read_data+0x62>
	switch (RxHeader.StdId) {
 8004b52:	2b58      	cmp	r3, #88	; 0x58
 8004b54:	d013      	beq.n	8004b7e <bootloader_can_read_data+0x4a>
 8004b56:	2b58      	cmp	r3, #88	; 0x58
 8004b58:	d30e      	bcc.n	8004b78 <bootloader_can_read_data+0x44>
 8004b5a:	2b76      	cmp	r3, #118	; 0x76
 8004b5c:	d018      	beq.n	8004b90 <bootloader_can_read_data+0x5c>
 8004b5e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004b62:	d00f      	beq.n	8004b84 <bootloader_can_read_data+0x50>
}
 8004b64:	e017      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_gethelp_cmd();
 8004b66:	f7ff fee3 	bl	8004930 <bootloader_handle_gethelp_cmd>
		break;
 8004b6a:	e014      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_getver_cmd();
 8004b6c:	f7ff ff06 	bl	800497c <bootloader_handle_getver_cmd>
		break;
 8004b70:	e011      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_flash_erase_cmd();
 8004b72:	f7ff ff53 	bl	8004a1c <bootloader_handle_flash_erase_cmd>
		break;
 8004b76:	e00e      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_mem_write_size_cmd();
 8004b78:	f7ff ff82 	bl	8004a80 <bootloader_handle_mem_write_size_cmd>
		break;
 8004b7c:	e00b      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_mem_write_address_cmd();
 8004b7e:	f7ff ff93 	bl	8004aa8 <bootloader_handle_mem_write_address_cmd>
		break;
 8004b82:	e008      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_mem_write_data_cmd();
 8004b84:	f7ff ffa4 	bl	8004ad0 <bootloader_handle_mem_write_data_cmd>
		break;
 8004b88:	e005      	b.n	8004b96 <bootloader_can_read_data+0x62>
		bootloader_handle_go_cmd();
 8004b8a:	f7ff ff11 	bl	80049b0 <bootloader_handle_go_cmd>
		break;
 8004b8e:	e002      	b.n	8004b96 <bootloader_can_read_data+0x62>
		UpdateAPP();
 8004b90:	f000 f8fa 	bl	8004d88 <UpdateAPP>
		break;
 8004b94:	bf00      	nop
}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000164 	.word	0x20000164

08004ba0 <bootloader_can_write_data>:

/* This function write data into can1 */
void bootloader_can_write_data(uint32_t length_of_data) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < length_of_data; i++) {
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e00c      	b.n	8004bc8 <bootloader_can_write_data+0x28>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData[i], &TxMailbox);
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <bootloader_can_write_data+0x44>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <bootloader_can_write_data+0x48>)
 8004bba:	490c      	ldr	r1, [pc, #48]	; (8004bec <bootloader_can_write_data+0x4c>)
 8004bbc:	480c      	ldr	r0, [pc, #48]	; (8004bf0 <bootloader_can_write_data+0x50>)
 8004bbe:	f000 fe0b 	bl	80057d8 <HAL_CAN_AddTxMessage>
	for (uint32_t i = 0; i < length_of_data; i++) {
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3ee      	bcc.n	8004bae <bootloader_can_write_data+0xe>
	}

	memset(TxData, 0, 8);
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4803      	ldr	r0, [pc, #12]	; (8004be4 <bootloader_can_write_data+0x44>)
 8004bd6:	f003 fa4b 	bl	8008070 <memset>
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000110 	.word	0x20000110
 8004be8:	20000118 	.word	0x20000118
 8004bec:	2000014c 	.word	0x2000014c
 8004bf0:	20000124 	.word	0x20000124

08004bf4 <get_app_version>:

/*Just returns the macro value */
uint8_t get_app_version(void) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
	return (uint8_t) APP_VERSION;
 8004bf8:	2305      	movs	r3, #5
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address) {
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	/*so the valid addresses which we can jump to are
	 external memory & SRAM & flash memory */

	if (go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c12:	d305      	bcc.n	8004c20 <verify_address+0x1c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8004c1a:	d201      	bcs.n	8004c20 <verify_address+0x1c>
		return (uint8_t) ADDR_VALID;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e028      	b.n	8004c72 <verify_address+0x6e>
	} else if (go_address >= SRAM2_BASE && go_address <= SRAM2_END) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <verify_address+0x7c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d905      	bls.n	8004c34 <verify_address+0x30>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8004c2e:	d201      	bcs.n	8004c34 <verify_address+0x30>
		return (uint8_t) ADDR_VALID;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e01e      	b.n	8004c72 <verify_address+0x6e>
	} else if (go_address >= SRAM3_BASE && go_address <= SRAM3_END) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <verify_address+0x80>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d905      	bls.n	8004c48 <verify_address+0x44>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8004c42:	d201      	bcs.n	8004c48 <verify_address+0x44>
		return (uint8_t) ADDR_VALID;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e014      	b.n	8004c72 <verify_address+0x6e>
	} else if (go_address >= FLASH_BASE && go_address <= FLASH_END) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4e:	d305      	bcc.n	8004c5c <verify_address+0x58>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8004c56:	d201      	bcs.n	8004c5c <verify_address+0x58>
		return (uint8_t) ADDR_VALID;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e00a      	b.n	8004c72 <verify_address+0x6e>
	} else if (go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <verify_address+0x84>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d905      	bls.n	8004c70 <verify_address+0x6c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8004c6a:	d201      	bcs.n	8004c70 <verify_address+0x6c>
		return (uint8_t) ADDR_VALID;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <verify_address+0x6e>
	} else
		return (uint8_t) ADDR_INVALID;
 8004c70:	2301      	movs	r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	2001bfff 	.word	0x2001bfff
 8004c84:	2001ffff 	.word	0x2001ffff
 8004c88:	40023fff 	.word	0x40023fff

08004c8c <execute_flash_erase>:

uint8_t execute_flash_erase(uint32_t initial_sector_number,
		uint32_t number_of_sector) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	//we have totally 12 sectors in one bank .. sector[0 to 11]
	//number_of_sector has to be in the range of 0 to 11
	// if sector_number = 0xff , that means mass erase !

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
	uint8_t erase_status = 0x01;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (number_of_sector > 23)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b17      	cmp	r3, #23
 8004ca4:	d901      	bls.n	8004caa <execute_flash_erase+0x1e>
		return (uint8_t) INVALID_SECTOR;
 8004ca6:	2312      	movs	r3, #18
 8004ca8:	e034      	b.n	8004d14 <execute_flash_erase+0x88>

	if ((initial_sector_number == 0xFFFFFFFF) || (number_of_sector <= 23)) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d002      	beq.n	8004cb8 <execute_flash_erase+0x2c>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b17      	cmp	r3, #23
 8004cb6:	d82c      	bhi.n	8004d12 <execute_flash_erase+0x86>
		if (number_of_sector == (uint32_t) 0xFFFFFFFF) {
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d104      	bne.n	8004cca <execute_flash_erase+0x3e>
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
			flashErase_handle.Banks = FLASH_BANK_1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e00f      	b.n	8004cea <execute_flash_erase+0x5e>
		} else {
			/*Here we are just calculating how many sectors needs to erased */
			uint32_t remanining_sector = 24 - number_of_sector;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f1c3 0318 	rsb	r3, r3, #24
 8004cd0:	623b      	str	r3, [r7, #32]
			if (number_of_sector > remanining_sector) {
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d901      	bls.n	8004cde <execute_flash_erase+0x52>
				number_of_sector = remanining_sector;
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	603b      	str	r3, [r7, #0]
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
			flashErase_handle.Sector = initial_sector_number; // this is the initial sector
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	617b      	str	r3, [r7, #20]
			flashErase_handle.NbSectors = number_of_sector;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	61bb      	str	r3, [r7, #24]
		}

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8004cea:	f001 f8dd 	bl	8005ea8 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our MCU will work on this voltage range
 8004cee:	2302      	movs	r3, #2
 8004cf0:	61fb      	str	r3, [r7, #28]
		erase_status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle,
 8004cf2:	f107 0208 	add.w	r2, r7, #8
 8004cf6:	f107 030c 	add.w	r3, r7, #12
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fa83 	bl	8006208 <HAL_FLASHEx_Erase>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&sectorError);
		HAL_FLASH_Lock();
 8004d08:	f001 f8f0 	bl	8005eec <HAL_FLASH_Lock>

		return (uint8_t) erase_status;
 8004d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d10:	e000      	b.n	8004d14 <execute_flash_erase+0x88>
	}

	return (uint8_t) INVALID_SECTOR;
 8004d12:	2312      	movs	r3, #18
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write() {
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef write_status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	71fb      	strb	r3, [r7, #7]

	uint32_t *ptr_data = &RxData;
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <execute_mem_write+0x64>)
 8004d28:	603b      	str	r3, [r7, #0]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8004d2a:	f001 f8bd 	bl	8005ea8 <HAL_FLASH_Unlock>

	//Here we program the flash byte by byte
	write_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDRESS,
 8004d2e:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <execute_mem_write+0x68>)
 8004d30:	6819      	ldr	r1, [r3, #0]
			ptr_data[0]);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
	write_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDRESS,
 8004d36:	f04f 0400 	mov.w	r4, #0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4623      	mov	r3, r4
 8004d3e:	2002      	movs	r0, #2
 8004d40:	f001 f85e 	bl	8005e00 <HAL_FLASH_Program>
 8004d44:	4603      	mov	r3, r0
 8004d46:	71fb      	strb	r3, [r7, #7]

	write_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDRESS + 4,
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <execute_mem_write+0x68>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	1d19      	adds	r1, r3, #4
			ptr_data[1]);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3304      	adds	r3, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
	write_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDRESS + 4,
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	f001 f84f 	bl	8005e00 <HAL_FLASH_Program>
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]

	ADDRESS = ADDRESS + 8;
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <execute_mem_write+0x68>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <execute_mem_write+0x68>)
 8004d6e:	6013      	str	r3, [r2, #0]

	HAL_FLASH_Lock();
 8004d70:	f001 f8bc 	bl	8005eec <HAL_FLASH_Lock>

	return (uint8_t) write_status;
 8004d74:	79fb      	ldrb	r3, [r7, #7]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	2000011c 	.word	0x2000011c
 8004d84:	20000008 	.word	0x20000008

08004d88 <UpdateAPP>:
uint8_t UpdateAPP() {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0

	uint8_t erase_status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef write_status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	71bb      	strb	r3, [r7, #6]
	ack_no++;
 8004d96:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <UpdateAPP+0xe8>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <UpdateAPP+0xe8>)
 8004da0:	701a      	strb	r2, [r3, #0]

	if (first_time) {
 8004da2:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <UpdateAPP+0xec>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d018      	beq.n	8004ddc <UpdateAPP+0x54>
		ADDRESS = (uint32_t) OS_SECTOR;
 8004daa:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <UpdateAPP+0xf0>)
 8004dac:	4a33      	ldr	r2, [pc, #204]	; (8004e7c <UpdateAPP+0xf4>)
 8004dae:	601a      	str	r2, [r3, #0]
		if (get_Active_Bank_no() == 0) {
 8004db0:	f7ff fda0 	bl	80048f4 <get_Active_Bank_no>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <UpdateAPP+0x40>
			erase_status = execute_flash_erase(4, 3);
 8004dba:	2103      	movs	r1, #3
 8004dbc:	2004      	movs	r0, #4
 8004dbe:	f7ff ff65 	bl	8004c8c <execute_flash_erase>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
 8004dc6:	e005      	b.n	8004dd4 <UpdateAPP+0x4c>
		} else {
			erase_status = execute_flash_erase(16, 3);
 8004dc8:	2103      	movs	r1, #3
 8004dca:	2010      	movs	r0, #16
 8004dcc:	f7ff ff5e 	bl	8004c8c <execute_flash_erase>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	71fb      	strb	r3, [r7, #7]
		}
		first_time = 0;
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <UpdateAPP+0xec>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e001      	b.n	8004de0 <UpdateAPP+0x58>
	} else {
		erase_status = FLASH_ERASE_SUCCESS;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	71fb      	strb	r3, [r7, #7]
	}

	if (erase_status == FLASH_ERASE_SUCCESS) {
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d123      	bne.n	8004e2e <UpdateAPP+0xa6>
		SIZE -= 1;
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <UpdateAPP+0xf8>)
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <UpdateAPP+0xf8>)
 8004df0:	801a      	strh	r2, [r3, #0]
		write_status = execute_mem_write();
 8004df2:	f7ff ff93 	bl	8004d1c <execute_mem_write>
 8004df6:	4603      	mov	r3, r0
 8004df8:	71bb      	strb	r3, [r7, #6]
		if (SIZE == 0) {
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <UpdateAPP+0xf8>)
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d120      	bne.n	8004e44 <UpdateAPP+0xbc>
			//sendHeartbeat();
			//toggleBankAndReset();
			if (ack_no == 2) {
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <UpdateAPP+0xe8>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d105      	bne.n	8004e16 <UpdateAPP+0x8e>
				ack_no = 0;
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <UpdateAPP+0xe8>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
				bootloader_can_write_data(1);
 8004e10:	2001      	movs	r0, #1
 8004e12:	f7ff fec5 	bl	8004ba0 <bootloader_can_write_data>
			}
			HAL_PWR_EnableBkUpAccess();
 8004e16:	f001 fe31 	bl	8006a7c <HAL_PWR_EnableBkUpAccess>
			// Writes a data in a RTC Backup data Register 0
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x0000);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4819      	ldr	r0, [pc, #100]	; (8004e84 <UpdateAPP+0xfc>)
 8004e20:	f002 fda0 	bl	8007964 <HAL_RTCEx_BKUPWrite>
			HAL_PWR_DisableBkUpAccess();
 8004e24:	f001 fe3e 	bl	8006aa4 <HAL_PWR_DisableBkUpAccess>
			HAL_NVIC_SystemReset();
 8004e28:	f000 ffd9 	bl	8005dde <HAL_NVIC_SystemReset>
 8004e2c:	e00a      	b.n	8004e44 <UpdateAPP+0xbc>
		}
	} else {
		TxHeader.StdId = FIRMWARE_OVER_THE_AIR;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <UpdateAPP+0x100>)
 8004e30:	2276      	movs	r2, #118	; 0x76
 8004e32:	601a      	str	r2, [r3, #0]
		TxData[0] = erase_status;
 8004e34:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <UpdateAPP+0x104>)
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	7013      	strb	r3, [r2, #0]
		bootloader_can_write_data(1);
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	f7ff feb0 	bl	8004ba0 <bootloader_can_write_data>
		return erase_status;
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	e010      	b.n	8004e66 <UpdateAPP+0xde>
	}

	TxHeader.StdId = FIRMWARE_OVER_THE_AIR;
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <UpdateAPP+0x100>)
 8004e46:	2276      	movs	r2, #118	; 0x76
 8004e48:	601a      	str	r2, [r3, #0]
	TxData[0] = write_status;
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <UpdateAPP+0x104>)
 8004e4c:	79bb      	ldrb	r3, [r7, #6]
 8004e4e:	7013      	strb	r3, [r2, #0]
	if (ack_no == 2) {
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <UpdateAPP+0xe8>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d105      	bne.n	8004e64 <UpdateAPP+0xdc>
		ack_no = 0;
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <UpdateAPP+0xe8>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
		bootloader_can_write_data(1);
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f7ff fe9e 	bl	8004ba0 <bootloader_can_write_data>
	}

	return write_status;
 8004e64:	79bb      	ldrb	r3, [r7, #6]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2000009c 	.word	0x2000009c
 8004e74:	2000000c 	.word	0x2000000c
 8004e78:	20000008 	.word	0x20000008
 8004e7c:	08010000 	.word	0x08010000
 8004e80:	20000180 	.word	0x20000180
 8004e84:	200000f0 	.word	0x200000f0
 8004e88:	2000014c 	.word	0x2000014c
 8004e8c:	20000110 	.word	0x20000110

08004e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_MspInit+0x4c>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4a0f      	ldr	r2, [pc, #60]	; (8004edc <HAL_MspInit+0x4c>)
 8004ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <HAL_MspInit+0x4c>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_MspInit+0x4c>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	4a08      	ldr	r2, [pc, #32]	; (8004edc <HAL_MspInit+0x4c>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_MspInit+0x4c>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800

08004ee0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	; 0x28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_CAN_MspInit+0x84>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d12c      	bne.n	8004f5c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <HAL_CAN_MspInit+0x88>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <HAL_CAN_MspInit+0x88>)
 8004f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <HAL_CAN_MspInit+0x88>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_CAN_MspInit+0x88>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_CAN_MspInit+0x88>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_CAN_MspInit+0x88>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004f3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f40:	2302      	movs	r3, #2
 8004f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004f4c:	2309      	movs	r3, #9
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	4619      	mov	r1, r3
 8004f56:	4805      	ldr	r0, [pc, #20]	; (8004f6c <HAL_CAN_MspInit+0x8c>)
 8004f58:	f001 fbb2 	bl	80066c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004f5c:	bf00      	nop
 8004f5e:	3728      	adds	r7, #40	; 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40006400 	.word	0x40006400
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40020000 	.word	0x40020000

08004f70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	2230      	movs	r2, #48	; 0x30
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f003 f875 	bl	8008070 <memset>
  if(hrtc->Instance==RTC)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a0c      	ldr	r2, [pc, #48]	; (8004fbc <HAL_RTC_MspInit+0x4c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d111      	bne.n	8004fb4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f90:	2320      	movs	r3, #32
 8004f92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f002 fa28 	bl	80073f4 <HAL_RCCEx_PeriphCLKConfig>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004faa:	f7ff fc5d 	bl	8004868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004fae:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <HAL_RTC_MspInit+0x50>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004fb4:	bf00      	nop
 8004fb6:	3738      	adds	r7, #56	; 0x38
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40002800 	.word	0x40002800
 8004fc0:	42470e3c 	.word	0x42470e3c

08004fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	f107 0314 	add.w	r3, r7, #20
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <HAL_UART_MspInit+0x84>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d12c      	bne.n	8005040 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <HAL_UART_MspInit+0x88>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <HAL_UART_MspInit+0x88>)
 8004ff0:	f043 0310 	orr.w	r3, r3, #16
 8004ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_UART_MspInit+0x88>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <HAL_UART_MspInit+0x88>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	4a10      	ldr	r2, [pc, #64]	; (800504c <HAL_UART_MspInit+0x88>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	6313      	str	r3, [r2, #48]	; 0x30
 8005012:	4b0e      	ldr	r3, [pc, #56]	; (800504c <HAL_UART_MspInit+0x88>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800501e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005024:	2302      	movs	r3, #2
 8005026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502c:	2303      	movs	r3, #3
 800502e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005030:	2307      	movs	r3, #7
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	4619      	mov	r1, r3
 800503a:	4805      	ldr	r0, [pc, #20]	; (8005050 <HAL_UART_MspInit+0x8c>)
 800503c:	f001 fb40 	bl	80066c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005040:	bf00      	nop
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40011000 	.word	0x40011000
 800504c:	40023800 	.word	0x40023800
 8005050:	40020000 	.word	0x40020000

08005054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005058:	e7fe      	b.n	8005058 <NMI_Handler+0x4>

0800505a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800505e:	e7fe      	b.n	800505e <HardFault_Handler+0x4>

08005060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005064:	e7fe      	b.n	8005064 <MemManage_Handler+0x4>

08005066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005066:	b480      	push	{r7}
 8005068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800506a:	e7fe      	b.n	800506a <BusFault_Handler+0x4>

0800506c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005070:	e7fe      	b.n	8005070 <UsageFault_Handler+0x4>

08005072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050a0:	f000 f938 	bl	8005314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050a4:	bf00      	nop
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e00a      	b.n	80050d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050ba:	f3af 8000 	nop.w
 80050be:	4601      	mov	r1, r0
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	60ba      	str	r2, [r7, #8]
 80050c6:	b2ca      	uxtb	r2, r1
 80050c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3301      	adds	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	dbf0      	blt.n	80050ba <_read+0x12>
  }

  return len;
 80050d8:	687b      	ldr	r3, [r7, #4]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e009      	b.n	8005108 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	60ba      	str	r2, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fba1 	bl	8004844 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	3301      	adds	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	dbf1      	blt.n	80050f4 <_write+0x12>
  }
  return len;
 8005110:	687b      	ldr	r3, [r7, #4]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <_close>:

int _close(int file)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005142:	605a      	str	r2, [r3, #4]
  return 0;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <_isatty>:

int _isatty(int file)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800515a:	2301      	movs	r3, #1
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800518c:	4a14      	ldr	r2, [pc, #80]	; (80051e0 <_sbrk+0x5c>)
 800518e:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <_sbrk+0x60>)
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <_sbrk+0x64>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <_sbrk+0x64>)
 80051a2:	4a12      	ldr	r2, [pc, #72]	; (80051ec <_sbrk+0x68>)
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <_sbrk+0x64>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d207      	bcs.n	80051c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051b4:	f002 ff32 	bl	800801c <__errno>
 80051b8:	4602      	mov	r2, r0
 80051ba:	230c      	movs	r3, #12
 80051bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	e009      	b.n	80051d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051c4:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <_sbrk+0x64>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <_sbrk+0x64>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <_sbrk+0x64>)
 80051d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20030000 	.word	0x20030000
 80051e4:	00000400 	.word	0x00000400
 80051e8:	200000a0 	.word	0x200000a0
 80051ec:	200001b0 	.word	0x200001b0

080051f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <SystemInit+0x24>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	4a06      	ldr	r2, [pc, #24]	; (8005214 <SystemInit+0x24>)
 80051fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <SystemInit+0x24>)
 8005206:	4a04      	ldr	r2, [pc, #16]	; (8005218 <SystemInit+0x28>)
 8005208:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800520a:	bf00      	nop
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000ed00 	.word	0xe000ed00
 8005218:	08004000 	.word	0x08004000

0800521c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800521c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005254 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005220:	480d      	ldr	r0, [pc, #52]	; (8005258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005222:	490e      	ldr	r1, [pc, #56]	; (800525c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005224:	4a0e      	ldr	r2, [pc, #56]	; (8005260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005228:	e002      	b.n	8005230 <LoopCopyDataInit>

0800522a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800522a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800522c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800522e:	3304      	adds	r3, #4

08005230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005234:	d3f9      	bcc.n	800522a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005236:	4a0b      	ldr	r2, [pc, #44]	; (8005264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005238:	4c0b      	ldr	r4, [pc, #44]	; (8005268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800523a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800523c:	e001      	b.n	8005242 <LoopFillZerobss>

0800523e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800523e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005240:	3204      	adds	r2, #4

08005242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005244:	d3fb      	bcc.n	800523e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005246:	f7ff ffd3 	bl	80051f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800524a:	f002 feed 	bl	8008028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800524e:	f7ff f94d 	bl	80044ec <main>
  bx  lr    
 8005252:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005254:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800525c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8005260:	08008a80 	.word	0x08008a80
  ldr r2, =_sbss
 8005264:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005268:	200001ac 	.word	0x200001ac

0800526c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800526c:	e7fe      	b.n	800526c <ADC_IRQHandler>
	...

08005270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_Init+0x40>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <HAL_Init+0x40>)
 800527a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800527e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_Init+0x40>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <HAL_Init+0x40>)
 8005286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800528a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800528c:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <HAL_Init+0x40>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <HAL_Init+0x40>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005298:	2003      	movs	r0, #3
 800529a:	f000 fd79 	bl	8005d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800529e:	200f      	movs	r0, #15
 80052a0:	f000 f808 	bl	80052b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052a4:	f7ff fdf4 	bl	8004e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023c00 	.word	0x40023c00

080052b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052bc:	4b12      	ldr	r3, [pc, #72]	; (8005308 <HAL_InitTick+0x54>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_InitTick+0x58>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fd87 	bl	8005de6 <HAL_SYSTICK_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e00e      	b.n	8005300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d80a      	bhi.n	80052fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052e8:	2200      	movs	r2, #0
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	f000 fd59 	bl	8005da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052f4:	4a06      	ldr	r2, [pc, #24]	; (8005310 <HAL_InitTick+0x5c>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000010 	.word	0x20000010
 800530c:	20000018 	.word	0x20000018
 8005310:	20000014 	.word	0x20000014

08005314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_IncTick+0x20>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_IncTick+0x24>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4413      	add	r3, r2
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <HAL_IncTick+0x24>)
 8005326:	6013      	str	r3, [r2, #0]
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000018 	.word	0x20000018
 8005338:	20000184 	.word	0x20000184

0800533c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return uwTick;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_GetTick+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000184 	.word	0x20000184

08005354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800535c:	f7ff ffee 	bl	800533c <HAL_GetTick>
 8005360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d005      	beq.n	800537a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <HAL_Delay+0x40>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800537a:	bf00      	nop
 800537c:	f7ff ffde 	bl	800533c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	429a      	cmp	r2, r3
 800538a:	d8f7      	bhi.n	800537c <HAL_Delay+0x28>
  {
  }
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000018 	.word	0x20000018

08005398 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0ed      	b.n	8005586 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fd92 	bl	8004ee0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053cc:	f7ff ffb6 	bl	800533c <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053d2:	e012      	b.n	80053fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80053d4:	f7ff ffb2 	bl	800533c <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b0a      	cmp	r3, #10
 80053e0:	d90b      	bls.n	80053fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2205      	movs	r2, #5
 80053f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e0c5      	b.n	8005586 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0e5      	beq.n	80053d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0202 	bic.w	r2, r2, #2
 8005416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005418:	f7ff ff90 	bl	800533c <HAL_GetTick>
 800541c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800541e:	e012      	b.n	8005446 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005420:	f7ff ff8c 	bl	800533c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b0a      	cmp	r3, #10
 800542c:	d90b      	bls.n	8005446 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2205      	movs	r2, #5
 800543e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e09f      	b.n	8005586 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	7e1b      	ldrb	r3, [r3, #24]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d108      	bne.n	800546e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e007      	b.n	800547e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800547c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7e5b      	ldrb	r3, [r3, #25]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d108      	bne.n	8005498 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e007      	b.n	80054a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	7e9b      	ldrb	r3, [r3, #26]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d108      	bne.n	80054c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0220 	orr.w	r2, r2, #32
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e007      	b.n	80054d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0220 	bic.w	r2, r2, #32
 80054d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7edb      	ldrb	r3, [r3, #27]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d108      	bne.n	80054ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0210 	bic.w	r2, r2, #16
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e007      	b.n	80054fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0210 	orr.w	r2, r2, #16
 80054fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7f1b      	ldrb	r3, [r3, #28]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d108      	bne.n	8005516 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e007      	b.n	8005526 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0208 	bic.w	r2, r2, #8
 8005524:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7f5b      	ldrb	r3, [r3, #29]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d108      	bne.n	8005540 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0204 	orr.w	r2, r2, #4
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e007      	b.n	8005550 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0204 	bic.w	r2, r2, #4
 800554e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	ea42 0103 	orr.w	r1, r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d003      	beq.n	80055b6 <HAL_CAN_ConfigFilter+0x26>
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	f040 80be 	bne.w	8005732 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80055b6:	4b65      	ldr	r3, [pc, #404]	; (800574c <HAL_CAN_ConfigFilter+0x1bc>)
 80055b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055c0:	f043 0201 	orr.w	r2, r3, #1
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	431a      	orrs	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2201      	movs	r2, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	43db      	mvns	r3, r3
 8005608:	401a      	ands	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d123      	bne.n	8005660 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	43db      	mvns	r3, r3
 8005622:	401a      	ands	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800563a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	3248      	adds	r2, #72	; 0x48
 8005640:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005654:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005656:	6979      	ldr	r1, [r7, #20]
 8005658:	3348      	adds	r3, #72	; 0x48
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d122      	bne.n	80056ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	431a      	orrs	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005688:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	3248      	adds	r2, #72	; 0x48
 800568e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80056a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	3348      	adds	r3, #72	; 0x48
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	440b      	add	r3, r1
 80056ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	43db      	mvns	r3, r3
 80056c0:	401a      	ands	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80056c8:	e007      	b.n	80056da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	401a      	ands	r2, r3
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80056f4:	e007      	b.n	8005706 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	431a      	orrs	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	431a      	orrs	r2, r3
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005724:	f023 0201 	bic.w	r2, r3, #1
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e006      	b.n	8005740 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40006400 	.word	0x40006400

08005750 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d12e      	bne.n	80057c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0201 	bic.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800577c:	f7ff fdde 	bl	800533c <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005782:	e012      	b.n	80057aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005784:	f7ff fdda 	bl	800533c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b0a      	cmp	r3, #10
 8005790:	d90b      	bls.n	80057aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2205      	movs	r2, #5
 80057a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e012      	b.n	80057d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e5      	bne.n	8005784 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e006      	b.n	80057d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	; 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80057f6:	7ffb      	ldrb	r3, [r7, #31]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d003      	beq.n	8005804 <HAL_CAN_AddTxMessage+0x2c>
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	f040 80b8 	bne.w	8005974 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80a0 	beq.w	8005964 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	0e1b      	lsrs	r3, r3, #24
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d907      	bls.n	8005844 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e09e      	b.n	8005982 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005844:	2201      	movs	r2, #1
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	409a      	lsls	r2, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10d      	bne.n	8005872 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005860:	68f9      	ldr	r1, [r7, #12]
 8005862:	6809      	ldr	r1, [r1, #0]
 8005864:	431a      	orrs	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3318      	adds	r3, #24
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	440b      	add	r3, r1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e00f      	b.n	8005892 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800587c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005886:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3318      	adds	r3, #24
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	440b      	add	r3, r1
 8005890:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3318      	adds	r3, #24
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	440b      	add	r3, r1
 80058a2:	3304      	adds	r3, #4
 80058a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	7d1b      	ldrb	r3, [r3, #20]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d111      	bne.n	80058d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	3318      	adds	r3, #24
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	6811      	ldr	r1, [r2, #0]
 80058c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3318      	adds	r3, #24
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	440b      	add	r3, r1
 80058ce:	3304      	adds	r3, #4
 80058d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3307      	adds	r3, #7
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	061a      	lsls	r2, r3, #24
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3306      	adds	r3, #6
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3305      	adds	r3, #5
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	4313      	orrs	r3, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	3204      	adds	r2, #4
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	4610      	mov	r0, r2
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	6811      	ldr	r1, [r2, #0]
 80058fa:	ea43 0200 	orr.w	r2, r3, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	440b      	add	r3, r1
 8005904:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005908:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3303      	adds	r3, #3
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	061a      	lsls	r2, r3, #24
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3302      	adds	r3, #2
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3301      	adds	r3, #1
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	4313      	orrs	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	4610      	mov	r0, r2
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	6811      	ldr	r1, [r2, #0]
 8005930:	ea43 0200 	orr.w	r2, r3, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	440b      	add	r3, r1
 800593a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800593e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3318      	adds	r3, #24
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	4413      	add	r3, r2
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	6811      	ldr	r1, [r2, #0]
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3318      	adds	r3, #24
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	440b      	add	r3, r1
 800595e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e00e      	b.n	8005982 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e006      	b.n	8005982 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3724      	adds	r7, #36	; 0x24
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d003      	beq.n	80059b2 <HAL_CAN_GetRxMessage+0x24>
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f040 80f3 	bne.w	8005b98 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10e      	bne.n	80059d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d116      	bne.n	80059f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0e7      	b.n	8005ba6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0d8      	b.n	8005ba6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	331b      	adds	r3, #27
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	4413      	add	r3, r2
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0204 	and.w	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	331b      	adds	r3, #27
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	4413      	add	r3, r2
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	0d5b      	lsrs	r3, r3, #21
 8005a22:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e00b      	b.n	8005a44 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	331b      	adds	r3, #27
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	4413      	add	r3, r2
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	08db      	lsrs	r3, r3, #3
 8005a3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	331b      	adds	r3, #27
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	4413      	add	r3, r2
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0202 	and.w	r2, r3, #2
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	331b      	adds	r3, #27
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 020f 	and.w	r2, r3, #15
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	331b      	adds	r3, #27
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3304      	adds	r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	331b      	adds	r3, #27
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	4413      	add	r3, r2
 8005a96:	3304      	adds	r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0a1a      	lsrs	r2, r3, #8
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0c1a      	lsrs	r2, r3, #16
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0e1a      	lsrs	r2, r3, #24
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	3303      	adds	r3, #3
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	0a1a      	lsrs	r2, r3, #8
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	3305      	adds	r3, #5
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	0c1a      	lsrs	r2, r3, #16
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	3306      	adds	r3, #6
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	0e1a      	lsrs	r2, r3, #24
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	3307      	adds	r3, #7
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d108      	bne.n	8005b84 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0220 	orr.w	r2, r2, #32
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	e007      	b.n	8005b94 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0220 	orr.w	r2, r2, #32
 8005b92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e006      	b.n	8005ba6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d002      	beq.n	8005bd4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005bce:	7afb      	ldrb	r3, [r7, #11]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d10f      	bne.n	8005bf4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e005      	b.n	8005bf4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <__NVIC_SetPriorityGrouping+0x44>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c20:	4013      	ands	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <__NVIC_SetPriorityGrouping+0x44>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	60d3      	str	r3, [r2, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	e000ed00 	.word	0xe000ed00

08005c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <__NVIC_GetPriorityGrouping+0x18>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f003 0307 	and.w	r3, r3, #7
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db0a      	blt.n	8005c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	490c      	ldr	r1, [pc, #48]	; (8005cb4 <__NVIC_SetPriority+0x4c>)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	0112      	lsls	r2, r2, #4
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c90:	e00a      	b.n	8005ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	4908      	ldr	r1, [pc, #32]	; (8005cb8 <__NVIC_SetPriority+0x50>)
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	0112      	lsls	r2, r2, #4
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	761a      	strb	r2, [r3, #24]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000e100 	.word	0xe000e100
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	; 0x24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f1c3 0307 	rsb	r3, r3, #7
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	bf28      	it	cs
 8005cda:	2304      	movcs	r3, #4
 8005cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2b06      	cmp	r3, #6
 8005ce4:	d902      	bls.n	8005cec <NVIC_EncodePriority+0x30>
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3b03      	subs	r3, #3
 8005cea:	e000      	b.n	8005cee <NVIC_EncodePriority+0x32>
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	401a      	ands	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d04:	f04f 31ff 	mov.w	r1, #4294967295
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	43d9      	mvns	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d14:	4313      	orrs	r3, r2
         );
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3724      	adds	r7, #36	; 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d28:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <__NVIC_SystemReset+0x20>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005d34:	4903      	ldr	r1, [pc, #12]	; (8005d44 <__NVIC_SystemReset+0x20>)
 8005d36:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <__NVIC_SystemReset+0x24>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60cb      	str	r3, [r1, #12]
 8005d3c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <__NVIC_SystemReset+0x1c>
 8005d44:	e000ed00 	.word	0xe000ed00
 8005d48:	05fa0004 	.word	0x05fa0004

08005d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d5c:	d301      	bcc.n	8005d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e00f      	b.n	8005d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <SysTick_Config+0x40>)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d6a:	210f      	movs	r1, #15
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	f7ff ff7a 	bl	8005c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <SysTick_Config+0x40>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <SysTick_Config+0x40>)
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	e000e010 	.word	0xe000e010

08005d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ff33 	bl	8005c04 <__NVIC_SetPriorityGrouping>
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	4603      	mov	r3, r0
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005db8:	f7ff ff48 	bl	8005c4c <__NVIC_GetPriorityGrouping>
 8005dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f7ff ff7a 	bl	8005cbc <NVIC_EncodePriority>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff ff49 	bl	8005c68 <__NVIC_SetPriority>
}
 8005dd6:	bf00      	nop
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005de2:	f7ff ff9f 	bl	8005d24 <__NVIC_SystemReset>

08005de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff ffac 	bl	8005d4c <SysTick_Config>
 8005df4:	4603      	mov	r3, r0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <HAL_FLASH_Program+0xa0>)
 8005e14:	7e1b      	ldrb	r3, [r3, #24]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_FLASH_Program+0x1e>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e03b      	b.n	8005e96 <HAL_FLASH_Program+0x96>
 8005e1e:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <HAL_FLASH_Program+0xa0>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e28:	f000 f8b0 	bl	8005f8c <FLASH_WaitForLastOperation>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d12b      	bne.n	8005e8e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005e3c:	783b      	ldrb	r3, [r7, #0]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68b8      	ldr	r0, [r7, #8]
 8005e42:	f000 f959 	bl	80060f8 <FLASH_Program_Byte>
 8005e46:	e016      	b.n	8005e76 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005e4e:	883b      	ldrh	r3, [r7, #0]
 8005e50:	4619      	mov	r1, r3
 8005e52:	68b8      	ldr	r0, [r7, #8]
 8005e54:	f000 f92c 	bl	80060b0 <FLASH_Program_HalfWord>
 8005e58:	e00d      	b.n	8005e76 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d105      	bne.n	8005e6c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	4619      	mov	r1, r3
 8005e64:	68b8      	ldr	r0, [r7, #8]
 8005e66:	f000 f901 	bl	800606c <FLASH_Program_Word>
 8005e6a:	e004      	b.n	8005e76 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e70:	68b8      	ldr	r0, [r7, #8]
 8005e72:	f000 f8cb 	bl	800600c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e7a:	f000 f887 	bl	8005f8c <FLASH_WaitForLastOperation>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005e82:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <HAL_FLASH_Program+0xa4>)
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <HAL_FLASH_Program+0xa4>)
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e8e:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <HAL_FLASH_Program+0xa0>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000188 	.word	0x20000188
 8005ea4:	40023c00 	.word	0x40023c00

08005ea8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_FLASH_Unlock+0x38>)
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da0b      	bge.n	8005ed2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_FLASH_Unlock+0x38>)
 8005ebc:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <HAL_FLASH_Unlock+0x3c>)
 8005ebe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <HAL_FLASH_Unlock+0x38>)
 8005ec2:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <HAL_FLASH_Unlock+0x40>)
 8005ec4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_FLASH_Unlock+0x38>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da01      	bge.n	8005ed2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	40023c00 	.word	0x40023c00
 8005ee4:	45670123 	.word	0x45670123
 8005ee8:	cdef89ab 	.word	0xcdef89ab

08005eec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_FLASH_Lock+0x1c>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <HAL_FLASH_Lock+0x1c>)
 8005ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005efa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40023c00 	.word	0x40023c00

08005f0c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <HAL_FLASH_OB_Unlock+0x2c>)
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_FLASH_OB_Unlock+0x2c>)
 8005f1e:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <HAL_FLASH_OB_Unlock+0x30>)
 8005f20:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_FLASH_OB_Unlock+0x2c>)
 8005f24:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <HAL_FLASH_OB_Unlock+0x34>)
 8005f26:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e000      	b.n	8005f2e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40023c00 	.word	0x40023c00
 8005f3c:	08192a3b 	.word	0x08192a3b
 8005f40:	4c5d6e7f 	.word	0x4c5d6e7f

08005f44 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_FLASH_OB_Lock+0x1c>)
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <HAL_FLASH_OB_Lock+0x1c>)
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40023c00 	.word	0x40023c00

08005f64 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_FLASH_OB_Launch+0x24>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <HAL_FLASH_OB_Launch+0x24>)
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8005f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f7c:	f000 f806 	bl	8005f8c <FLASH_WaitForLastOperation>
 8005f80:	4603      	mov	r3, r0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023c14 	.word	0x40023c14

08005f8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f98:	4b1a      	ldr	r3, [pc, #104]	; (8006004 <FLASH_WaitForLastOperation+0x78>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005f9e:	f7ff f9cd 	bl	800533c <HAL_GetTick>
 8005fa2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005fa4:	e010      	b.n	8005fc8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d00c      	beq.n	8005fc8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <FLASH_WaitForLastOperation+0x38>
 8005fb4:	f7ff f9c2 	bl	800533c <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d201      	bcs.n	8005fc8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e019      	b.n	8005ffc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <FLASH_WaitForLastOperation+0x7c>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e8      	bne.n	8005fa6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <FLASH_WaitForLastOperation+0x7c>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005fe0:	4b09      	ldr	r3, [pc, #36]	; (8006008 <FLASH_WaitForLastOperation+0x7c>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005fe6:	4b08      	ldr	r3, [pc, #32]	; (8006008 <FLASH_WaitForLastOperation+0x7c>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005ff2:	f000 f8a3 	bl	800613c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
  
}  
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000188 	.word	0x20000188
 8006008:	40023c00 	.word	0x40023c00

0800600c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800600c:	b490      	push	{r4, r7}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006018:	4b13      	ldr	r3, [pc, #76]	; (8006068 <FLASH_Program_DoubleWord+0x5c>)
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	4a12      	ldr	r2, [pc, #72]	; (8006068 <FLASH_Program_DoubleWord+0x5c>)
 800601e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006022:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006024:	4b10      	ldr	r3, [pc, #64]	; (8006068 <FLASH_Program_DoubleWord+0x5c>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	4a0f      	ldr	r2, [pc, #60]	; (8006068 <FLASH_Program_DoubleWord+0x5c>)
 800602a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800602e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006030:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <FLASH_Program_DoubleWord+0x5c>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <FLASH_Program_DoubleWord+0x5c>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006042:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006046:	e9d7 1200 	ldrd	r1, r2, [r7]
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	f04f 0400 	mov.w	r4, #0
 8006052:	0013      	movs	r3, r2
 8006054:	2400      	movs	r4, #0
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	3204      	adds	r2, #4
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bc90      	pop	{r4, r7}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40023c00 	.word	0x40023c00

0800606c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <FLASH_Program_Word+0x40>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	4a0c      	ldr	r2, [pc, #48]	; (80060ac <FLASH_Program_Word+0x40>)
 800607c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <FLASH_Program_Word+0x40>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <FLASH_Program_Word+0x40>)
 8006088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800608c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <FLASH_Program_Word+0x40>)
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	4a06      	ldr	r2, [pc, #24]	; (80060ac <FLASH_Program_Word+0x40>)
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	601a      	str	r2, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	40023c00 	.word	0x40023c00

080060b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <FLASH_Program_HalfWord+0x44>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <FLASH_Program_HalfWord+0x44>)
 80060c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <FLASH_Program_HalfWord+0x44>)
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <FLASH_Program_HalfWord+0x44>)
 80060ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <FLASH_Program_HalfWord+0x44>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	4a06      	ldr	r2, [pc, #24]	; (80060f4 <FLASH_Program_HalfWord+0x44>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	801a      	strh	r2, [r3, #0]
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40023c00 	.word	0x40023c00

080060f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <FLASH_Program_Byte+0x40>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	4a0b      	ldr	r2, [pc, #44]	; (8006138 <FLASH_Program_Byte+0x40>)
 800610a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <FLASH_Program_Byte+0x40>)
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <FLASH_Program_Byte+0x40>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006118:	4b07      	ldr	r3, [pc, #28]	; (8006138 <FLASH_Program_Byte+0x40>)
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	4a06      	ldr	r2, [pc, #24]	; (8006138 <FLASH_Program_Byte+0x40>)
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	78fa      	ldrb	r2, [r7, #3]
 8006128:	701a      	strb	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40023c00 	.word	0x40023c00

0800613c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006140:	4b2f      	ldr	r3, [pc, #188]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800614c:	4b2d      	ldr	r3, [pc, #180]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f043 0310 	orr.w	r3, r3, #16
 8006154:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 8006156:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006158:	4b29      	ldr	r3, [pc, #164]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 800615a:	2210      	movs	r2, #16
 800615c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800615e:	4b28      	ldr	r3, [pc, #160]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800616a:	4b26      	ldr	r3, [pc, #152]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f043 0308 	orr.w	r3, r3, #8
 8006172:	4a24      	ldr	r2, [pc, #144]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 8006174:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006176:	4b22      	ldr	r3, [pc, #136]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 8006178:	2220      	movs	r2, #32
 800617a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800617c:	4b20      	ldr	r3, [pc, #128]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006188:	4b1e      	ldr	r3, [pc, #120]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f043 0304 	orr.w	r3, r3, #4
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 8006192:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006194:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 8006196:	2240      	movs	r2, #64	; 0x40
 8006198:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800619a:	4b19      	ldr	r3, [pc, #100]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80061a6:	4b17      	ldr	r3, [pc, #92]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f043 0302 	orr.w	r3, r3, #2
 80061ae:	4a15      	ldr	r2, [pc, #84]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 80061b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 80061ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 80061d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f043 0320 	orr.w	r3, r3, #32
 80061ec:	4a05      	ldr	r2, [pc, #20]	; (8006204 <FLASH_SetErrorCode+0xc8>)
 80061ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <FLASH_SetErrorCode+0xc4>)
 80061f2:	2202      	movs	r2, #2
 80061f4:	60da      	str	r2, [r3, #12]
  }
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40023c00 	.word	0x40023c00
 8006204:	20000188 	.word	0x20000188

08006208 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800621a:	4b32      	ldr	r3, [pc, #200]	; (80062e4 <HAL_FLASHEx_Erase+0xdc>)
 800621c:	7e1b      	ldrb	r3, [r3, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_FLASHEx_Erase+0x1e>
 8006222:	2302      	movs	r3, #2
 8006224:	e05a      	b.n	80062dc <HAL_FLASHEx_Erase+0xd4>
 8006226:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <HAL_FLASHEx_Erase+0xdc>)
 8006228:	2201      	movs	r2, #1
 800622a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800622c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006230:	f7ff feac 	bl	8005f8c <FLASH_WaitForLastOperation>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d14a      	bne.n	80062d4 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d117      	bne.n	800627e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 f8a4 	bl	80063a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006260:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006264:	f7ff fe92 	bl	8005f8c <FLASH_WaitForLastOperation>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800626c:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <HAL_FLASHEx_Erase+0xe0>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	4a1d      	ldr	r2, [pc, #116]	; (80062e8 <HAL_FLASHEx_Erase+0xe0>)
 8006272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006276:	f023 0304 	bic.w	r3, r3, #4
 800627a:	6113      	str	r3, [r2, #16]
 800627c:	e028      	b.n	80062d0 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]
 8006284:	e01c      	b.n	80062c0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f000 f8c4 	bl	800641c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006294:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006298:	f7ff fe78 	bl	8005f8c <FLASH_WaitForLastOperation>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_FLASHEx_Erase+0xe0>)
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <HAL_FLASHEx_Erase+0xe0>)
 80062a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80062aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	601a      	str	r2, [r3, #0]
          break;
 80062b8:	e00a      	b.n	80062d0 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3301      	adds	r3, #1
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4413      	add	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d3da      	bcc.n	8006286 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80062d0:	f000 f9b0 	bl	8006634 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <HAL_FLASHEx_Erase+0xdc>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	761a      	strb	r2, [r3, #24]

  return status;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000188 	.word	0x20000188
 80062e8:	40023c00 	.word	0x40023c00

080062ec <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01e      	beq.n	8006342 <HAL_FLASHEx_AdvOBProgram+0x56>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if ((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d10d      	bne.n	8006328 <HAL_FLASHEx_AdvOBProgram+0x3c>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	899b      	ldrh	r3, [r3, #12]
 8006310:	4618      	mov	r0, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	89db      	ldrh	r3, [r3, #14]
 8006316:	4619      	mov	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	461a      	mov	r2, r3
 800631e:	f000 f8f3 	bl	8006508 <FLASH_OB_EnablePCROP>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]
 8006326:	e00c      	b.n	8006342 <HAL_FLASHEx_AdvOBProgram+0x56>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
#else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	899b      	ldrh	r3, [r3, #12]
 800632c:	4618      	mov	r0, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	89db      	ldrh	r3, [r3, #14]
 8006332:	4619      	mov	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	461a      	mov	r2, r3
 800633a:	f000 f92d 	bl	8006598 <FLASH_OB_DisablePCROP>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  /*Program BOOT config option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <HAL_FLASHEx_AdvOBProgram+0x70>
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7c1b      	ldrb	r3, [r3, #16]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f8b0 	bl	80064b8 <FLASH_OB_BootConfig>
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
  /*Get Sector for Bank1*/
  pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <HAL_FLASHEx_AdvOBGetConfig+0x34>)
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	819a      	strh	r2, [r3, #12]

  /*Get Sector for Bank2*/
  pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <HAL_FLASHEx_AdvOBGetConfig+0x38>)
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29a      	uxth	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	81da      	strh	r2, [r3, #14]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <HAL_FLASHEx_AdvOBGetConfig+0x3c>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	741a      	strb	r2, [r3, #16]
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40023c16 	.word	0x40023c16
 80063a0:	40023c1a 	.word	0x40023c1a
 80063a4:	40023c14 	.word	0x40023c14

080063a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	6039      	str	r1, [r7, #0]
 80063b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <FLASH_MassErase+0x70>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <FLASH_MassErase+0x70>)
 80063ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063be:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d108      	bne.n	80063d8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <FLASH_MassErase+0x70>)
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	4a13      	ldr	r2, [pc, #76]	; (8006418 <FLASH_MassErase+0x70>)
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d0:	f043 0304 	orr.w	r3, r3, #4
 80063d4:	6113      	str	r3, [r2, #16]
 80063d6:	e00f      	b.n	80063f8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d106      	bne.n	80063ec <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80063de:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <FLASH_MassErase+0x70>)
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4a0d      	ldr	r2, [pc, #52]	; (8006418 <FLASH_MassErase+0x70>)
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	6113      	str	r3, [r2, #16]
 80063ea:	e005      	b.n	80063f8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <FLASH_MassErase+0x70>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	4a09      	ldr	r2, [pc, #36]	; (8006418 <FLASH_MassErase+0x70>)
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <FLASH_MassErase+0x70>)
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	4313      	orrs	r3, r2
 8006402:	4a05      	ldr	r2, [pc, #20]	; (8006418 <FLASH_MassErase+0x70>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006408:	6113      	str	r3, [r2, #16]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40023c00 	.word	0x40023c00

0800641c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e010      	b.n	800645a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d103      	bne.n	8006446 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800643e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e009      	b.n	800645a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d103      	bne.n	8006454 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800644c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e002      	b.n	800645a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006458:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b0b      	cmp	r3, #11
 800645e:	d902      	bls.n	8006466 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006466:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	4a12      	ldr	r2, [pc, #72]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 800646c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006470:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	490f      	ldr	r1, [pc, #60]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 8006484:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006488:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4313      	orrs	r3, r2
 8006494:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 8006496:	f043 0302 	orr.w	r3, r3, #2
 800649a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	4a04      	ldr	r2, [pc, #16]	; (80064b4 <FLASH_Erase_Sector+0x98>)
 80064a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a6:	6113      	str	r3, [r2, #16]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40023c00 	.word	0x40023c00

080064b8 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_BOOT(BootConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064ca:	f7ff fd5f 	bl	8005f8c <FLASH_WaitForLastOperation>
 80064ce:	4603      	mov	r3, r0
 80064d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10f      	bne.n	80064f8 <FLASH_OB_BootConfig+0x40>
  {
    /* Set Dual Bank Boot */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <FLASH_OB_BootConfig+0x4c>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	4a09      	ldr	r2, [pc, #36]	; (8006504 <FLASH_OB_BootConfig+0x4c>)
 80064e0:	f023 0310 	bic.w	r3, r3, #16
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= BootConfig;
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <FLASH_OB_BootConfig+0x4c>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4905      	ldr	r1, [pc, #20]	; (8006504 <FLASH_OB_BootConfig+0x4c>)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	700b      	strb	r3, [r1, #0]
  }

  return status;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40023c14 	.word	0x40023c14

08006508 <FLASH_OB_EnablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006518:	f24c 3050 	movw	r0, #50000	; 0xc350
 800651c:	f7ff fd36 	bl	8005f8c <FLASH_WaitForLastOperation>
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d12d      	bne.n	8006586 <FLASH_OB_EnablePCROP+0x7e>
  {
    if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d002      	beq.n	8006536 <FLASH_OB_EnablePCROP+0x2e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d109      	bne.n	800654a <FLASH_OB_EnablePCROP+0x42>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)SectorBank1;
 8006536:	4b16      	ldr	r3, [pc, #88]	; (8006590 <FLASH_OB_EnablePCROP+0x88>)
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	b29b      	uxth	r3, r3
 8006540:	4913      	ldr	r1, [pc, #76]	; (8006590 <FLASH_OB_EnablePCROP+0x88>)
 8006542:	4313      	orrs	r3, r2
 8006544:	b29b      	uxth	r3, r3
 8006546:	800b      	strh	r3, [r1, #0]
 8006548:	e008      	b.n	800655c <FLASH_OB_EnablePCROP+0x54>
    }
    else
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /*Write protection done on sectors of BANK2*/
      *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2;
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <FLASH_OB_EnablePCROP+0x8c>)
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	b29b      	uxth	r3, r3
 8006554:	490f      	ldr	r1, [pc, #60]	; (8006594 <FLASH_OB_EnablePCROP+0x8c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	b29b      	uxth	r3, r3
 800655a:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if (Banks == FLASH_BANK_BOTH)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d111      	bne.n	8006586 <FLASH_OB_EnablePCROP+0x7e>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006562:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006566:	f7ff fd11 	bl	8005f8c <FLASH_WaitForLastOperation>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800656e:	7dfb      	ldrb	r3, [r7, #23]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d108      	bne.n	8006586 <FLASH_OB_EnablePCROP+0x7e>
      {
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2;
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <FLASH_OB_EnablePCROP+0x8c>)
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29a      	uxth	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	b29b      	uxth	r3, r3
 800657e:	4905      	ldr	r1, [pc, #20]	; (8006594 <FLASH_OB_EnablePCROP+0x8c>)
 8006580:	4313      	orrs	r3, r2
 8006582:	b29b      	uxth	r3, r3
 8006584:	800b      	strh	r3, [r1, #0]
      }
    }

  }

  return status;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023c16 	.word	0x40023c16
 8006594:	40023c1a 	.word	0x40023c1a

08006598 <FLASH_OB_DisablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80065a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065ac:	f7ff fcee 	bl	8005f8c <FLASH_WaitForLastOperation>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d133      	bne.n	8006622 <FLASH_OB_DisablePCROP+0x8a>
  {
    if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d002      	beq.n	80065c6 <FLASH_OB_DisablePCROP+0x2e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d10b      	bne.n	80065de <FLASH_OB_DisablePCROP+0x46>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~SectorBank1);
 80065c6:	4b19      	ldr	r3, [pc, #100]	; (800662c <FLASH_OB_DisablePCROP+0x94>)
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	4915      	ldr	r1, [pc, #84]	; (800662c <FLASH_OB_DisablePCROP+0x94>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	b29b      	uxth	r3, r3
 80065da:	800b      	strh	r3, [r1, #0]
 80065dc:	e00a      	b.n	80065f4 <FLASH_OB_DisablePCROP+0x5c>
    }
    else
    {
      /*Write protection done on sectors of BANK2*/
      assert_param(IS_OB_PCROP(SectorBank2));
      *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2);
 80065de:	4b14      	ldr	r3, [pc, #80]	; (8006630 <FLASH_OB_DisablePCROP+0x98>)
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4910      	ldr	r1, [pc, #64]	; (8006630 <FLASH_OB_DisablePCROP+0x98>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if (Banks == FLASH_BANK_BOTH)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d113      	bne.n	8006622 <FLASH_OB_DisablePCROP+0x8a>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80065fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80065fe:	f7ff fcc5 	bl	8005f8c <FLASH_WaitForLastOperation>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <FLASH_OB_DisablePCROP+0x8a>
      {
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2);
 800660c:	4b08      	ldr	r3, [pc, #32]	; (8006630 <FLASH_OB_DisablePCROP+0x98>)
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29a      	uxth	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	b29b      	uxth	r3, r3
 8006616:	43db      	mvns	r3, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	4905      	ldr	r1, [pc, #20]	; (8006630 <FLASH_OB_DisablePCROP+0x98>)
 800661c:	4013      	ands	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	800b      	strh	r3, [r1, #0]
      }
    }

  }

  return status;
 8006622:	7dfb      	ldrb	r3, [r7, #23]

}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40023c16 	.word	0x40023c16
 8006630:	40023c1a 	.word	0x40023c1a

08006634 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006638:	4b20      	ldr	r3, [pc, #128]	; (80066bc <FLASH_FlushCaches+0x88>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <FLASH_FlushCaches+0x88>)
 800664a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800664e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006650:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a19      	ldr	r2, [pc, #100]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	4b17      	ldr	r3, [pc, #92]	; (80066bc <FLASH_FlushCaches+0x88>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a16      	ldr	r2, [pc, #88]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006666:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006668:	4b14      	ldr	r3, [pc, #80]	; (80066bc <FLASH_FlushCaches+0x88>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a13      	ldr	r2, [pc, #76]	; (80066bc <FLASH_FlushCaches+0x88>)
 800666e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006672:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006674:	4b11      	ldr	r3, [pc, #68]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006680:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <FLASH_FlushCaches+0x88>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <FLASH_FlushCaches+0x88>)
 8006692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	4b08      	ldr	r3, [pc, #32]	; (80066bc <FLASH_FlushCaches+0x88>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a07      	ldr	r2, [pc, #28]	; (80066bc <FLASH_FlushCaches+0x88>)
 800669e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <FLASH_FlushCaches+0x88>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a04      	ldr	r2, [pc, #16]	; (80066bc <FLASH_FlushCaches+0x88>)
 80066aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066ae:	6013      	str	r3, [r2, #0]
  }
}
 80066b0:	bf00      	nop
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40023c00 	.word	0x40023c00

080066c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e177      	b.n	80069cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066dc:	2201      	movs	r2, #1
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	f040 8166 	bne.w	80069c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	2b01      	cmp	r3, #1
 8006704:	d005      	beq.n	8006712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800670e:	2b02      	cmp	r3, #2
 8006710:	d130      	bne.n	8006774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	2203      	movs	r2, #3
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43db      	mvns	r3, r3
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	4013      	ands	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	fa02 f303 	lsl.w	r3, r2, r3
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006748:	2201      	movs	r2, #1
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	f003 0201 	and.w	r2, r3, #1
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4313      	orrs	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d017      	beq.n	80067b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	2203      	movs	r2, #3
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d123      	bne.n	8006804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	08da      	lsrs	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3208      	adds	r2, #8
 80067c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	220f      	movs	r2, #15
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	08da      	lsrs	r2, r3, #3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3208      	adds	r2, #8
 80067fe:	69b9      	ldr	r1, [r7, #24]
 8006800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	2203      	movs	r2, #3
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4013      	ands	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f003 0203 	and.w	r2, r3, #3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80c0 	beq.w	80069c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	4b65      	ldr	r3, [pc, #404]	; (80069e0 <HAL_GPIO_Init+0x320>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	4a64      	ldr	r2, [pc, #400]	; (80069e0 <HAL_GPIO_Init+0x320>)
 8006850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006854:	6453      	str	r3, [r2, #68]	; 0x44
 8006856:	4b62      	ldr	r3, [pc, #392]	; (80069e0 <HAL_GPIO_Init+0x320>)
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006862:	4a60      	ldr	r2, [pc, #384]	; (80069e4 <HAL_GPIO_Init+0x324>)
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	3302      	adds	r3, #2
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	220f      	movs	r2, #15
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	43db      	mvns	r3, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4013      	ands	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a57      	ldr	r2, [pc, #348]	; (80069e8 <HAL_GPIO_Init+0x328>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d037      	beq.n	80068fe <HAL_GPIO_Init+0x23e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a56      	ldr	r2, [pc, #344]	; (80069ec <HAL_GPIO_Init+0x32c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d031      	beq.n	80068fa <HAL_GPIO_Init+0x23a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a55      	ldr	r2, [pc, #340]	; (80069f0 <HAL_GPIO_Init+0x330>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02b      	beq.n	80068f6 <HAL_GPIO_Init+0x236>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a54      	ldr	r2, [pc, #336]	; (80069f4 <HAL_GPIO_Init+0x334>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d025      	beq.n	80068f2 <HAL_GPIO_Init+0x232>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a53      	ldr	r2, [pc, #332]	; (80069f8 <HAL_GPIO_Init+0x338>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d01f      	beq.n	80068ee <HAL_GPIO_Init+0x22e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a52      	ldr	r2, [pc, #328]	; (80069fc <HAL_GPIO_Init+0x33c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d019      	beq.n	80068ea <HAL_GPIO_Init+0x22a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a51      	ldr	r2, [pc, #324]	; (8006a00 <HAL_GPIO_Init+0x340>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_GPIO_Init+0x226>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a50      	ldr	r2, [pc, #320]	; (8006a04 <HAL_GPIO_Init+0x344>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00d      	beq.n	80068e2 <HAL_GPIO_Init+0x222>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a4f      	ldr	r2, [pc, #316]	; (8006a08 <HAL_GPIO_Init+0x348>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <HAL_GPIO_Init+0x21e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a4e      	ldr	r2, [pc, #312]	; (8006a0c <HAL_GPIO_Init+0x34c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_GPIO_Init+0x21a>
 80068d6:	2309      	movs	r3, #9
 80068d8:	e012      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068da:	230a      	movs	r3, #10
 80068dc:	e010      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068de:	2308      	movs	r3, #8
 80068e0:	e00e      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068e2:	2307      	movs	r3, #7
 80068e4:	e00c      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068e6:	2306      	movs	r3, #6
 80068e8:	e00a      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068ea:	2305      	movs	r3, #5
 80068ec:	e008      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068ee:	2304      	movs	r3, #4
 80068f0:	e006      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068f2:	2303      	movs	r3, #3
 80068f4:	e004      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e002      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <HAL_GPIO_Init+0x240>
 80068fe:	2300      	movs	r3, #0
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	f002 0203 	and.w	r2, r2, #3
 8006906:	0092      	lsls	r2, r2, #2
 8006908:	4093      	lsls	r3, r2
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006910:	4934      	ldr	r1, [pc, #208]	; (80069e4 <HAL_GPIO_Init+0x324>)
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	089b      	lsrs	r3, r3, #2
 8006916:	3302      	adds	r3, #2
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800691e:	4b3c      	ldr	r3, [pc, #240]	; (8006a10 <HAL_GPIO_Init+0x350>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006942:	4a33      	ldr	r2, [pc, #204]	; (8006a10 <HAL_GPIO_Init+0x350>)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006948:	4b31      	ldr	r3, [pc, #196]	; (8006a10 <HAL_GPIO_Init+0x350>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	43db      	mvns	r3, r3
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	4013      	ands	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800696c:	4a28      	ldr	r2, [pc, #160]	; (8006a10 <HAL_GPIO_Init+0x350>)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006972:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <HAL_GPIO_Init+0x350>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	43db      	mvns	r3, r3
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	4013      	ands	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_GPIO_Init+0x350>)
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800699c:	4b1c      	ldr	r3, [pc, #112]	; (8006a10 <HAL_GPIO_Init+0x350>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4013      	ands	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069c0:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <HAL_GPIO_Init+0x350>)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3301      	adds	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b0f      	cmp	r3, #15
 80069d0:	f67f ae84 	bls.w	80066dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069d4:	bf00      	nop
 80069d6:	3724      	adds	r7, #36	; 0x24
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40023800 	.word	0x40023800
 80069e4:	40013800 	.word	0x40013800
 80069e8:	40020000 	.word	0x40020000
 80069ec:	40020400 	.word	0x40020400
 80069f0:	40020800 	.word	0x40020800
 80069f4:	40020c00 	.word	0x40020c00
 80069f8:	40021000 	.word	0x40021000
 80069fc:	40021400 	.word	0x40021400
 8006a00:	40021800 	.word	0x40021800
 8006a04:	40021c00 	.word	0x40021c00
 8006a08:	40022000 	.word	0x40022000
 8006a0c:	40022400 	.word	0x40022400
 8006a10:	40013c00 	.word	0x40013c00

08006a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
 8006a20:	4613      	mov	r3, r2
 8006a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a24:	787b      	ldrb	r3, [r7, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a30:	e003      	b.n	8006a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a32:	887b      	ldrh	r3, [r7, #2]
 8006a34:	041a      	lsls	r2, r3, #16
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	619a      	str	r2, [r3, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	041a      	lsls	r2, r3, #16
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	43d9      	mvns	r1, r3
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	400b      	ands	r3, r1
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	619a      	str	r2, [r3, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <HAL_PWR_EnableBkUpAccess+0x20>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006a8e:	687b      	ldr	r3, [r7, #4]
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	420e0020 	.word	0x420e0020
 8006aa0:	40007000 	.word	0x40007000

08006aa4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006ab6:	687b      	ldr	r3, [r7, #4]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	420e0020 	.word	0x420e0020
 8006ac8:	40007000 	.word	0x40007000

08006acc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <HAL_PWREx_EnableOverDrive+0x90>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_PWREx_EnableOverDrive+0x90>)
 8006ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ae6:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <HAL_PWREx_EnableOverDrive+0x90>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006af2:	4b1b      	ldr	r3, [pc, #108]	; (8006b60 <HAL_PWREx_EnableOverDrive+0x94>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006af8:	f7fe fc20 	bl	800533c <HAL_GetTick>
 8006afc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006afe:	e009      	b.n	8006b14 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b00:	f7fe fc1c 	bl	800533c <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b0e:	d901      	bls.n	8006b14 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e01f      	b.n	8006b54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b14:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b20:	d1ee      	bne.n	8006b00 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b22:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b28:	f7fe fc08 	bl	800533c <HAL_GetTick>
 8006b2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b2e:	e009      	b.n	8006b44 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b30:	f7fe fc04 	bl	800533c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3e:	d901      	bls.n	8006b44 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e007      	b.n	8006b54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b44:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b50:	d1ee      	bne.n	8006b30 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	420e0040 	.word	0x420e0040
 8006b64:	40007000 	.word	0x40007000
 8006b68:	420e0044 	.word	0x420e0044

08006b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e264      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d075      	beq.n	8006c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b8a:	4ba3      	ldr	r3, [pc, #652]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d00c      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b96:	4ba0      	ldr	r3, [pc, #640]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d112      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ba2:	4b9d      	ldr	r3, [pc, #628]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bae:	d10b      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb0:	4b99      	ldr	r3, [pc, #612]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d05b      	beq.n	8006c74 <HAL_RCC_OscConfig+0x108>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d157      	bne.n	8006c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e23f      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d106      	bne.n	8006be0 <HAL_RCC_OscConfig+0x74>
 8006bd2:	4b91      	ldr	r3, [pc, #580]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a90      	ldr	r2, [pc, #576]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e01d      	b.n	8006c1c <HAL_RCC_OscConfig+0xb0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCC_OscConfig+0x98>
 8006bea:	4b8b      	ldr	r3, [pc, #556]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a8a      	ldr	r2, [pc, #552]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	4b88      	ldr	r3, [pc, #544]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a87      	ldr	r2, [pc, #540]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e00b      	b.n	8006c1c <HAL_RCC_OscConfig+0xb0>
 8006c04:	4b84      	ldr	r3, [pc, #528]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a83      	ldr	r2, [pc, #524]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4b81      	ldr	r3, [pc, #516]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a80      	ldr	r2, [pc, #512]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d013      	beq.n	8006c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c24:	f7fe fb8a 	bl	800533c <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c2c:	f7fe fb86 	bl	800533c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e204      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3e:	4b76      	ldr	r3, [pc, #472]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0xc0>
 8006c4a:	e014      	b.n	8006c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fe fb76 	bl	800533c <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c54:	f7fe fb72 	bl	800533c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b64      	cmp	r3, #100	; 0x64
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e1f0      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c66:	4b6c      	ldr	r3, [pc, #432]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0xe8>
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d063      	beq.n	8006d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c82:	4b65      	ldr	r3, [pc, #404]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 030c 	and.w	r3, r3, #12
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8e:	4b62      	ldr	r3, [pc, #392]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d11c      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c9a:	4b5f      	ldr	r3, [pc, #380]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d116      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca6:	4b5c      	ldr	r3, [pc, #368]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_RCC_OscConfig+0x152>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d001      	beq.n	8006cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e1c4      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cbe:	4b56      	ldr	r3, [pc, #344]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4952      	ldr	r1, [pc, #328]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cd2:	e03a      	b.n	8006d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d020      	beq.n	8006d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cdc:	4b4f      	ldr	r3, [pc, #316]	; (8006e1c <HAL_RCC_OscConfig+0x2b0>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce2:	f7fe fb2b 	bl	800533c <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cea:	f7fe fb27 	bl	800533c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e1a5      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfc:	4b46      	ldr	r3, [pc, #280]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d08:	4b43      	ldr	r3, [pc, #268]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	4940      	ldr	r1, [pc, #256]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	600b      	str	r3, [r1, #0]
 8006d1c:	e015      	b.n	8006d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d1e:	4b3f      	ldr	r3, [pc, #252]	; (8006e1c <HAL_RCC_OscConfig+0x2b0>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fe fb0a 	bl	800533c <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d2c:	f7fe fb06 	bl	800533c <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e184      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d030      	beq.n	8006db8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d5e:	4b30      	ldr	r3, [pc, #192]	; (8006e20 <HAL_RCC_OscConfig+0x2b4>)
 8006d60:	2201      	movs	r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d64:	f7fe faea 	bl	800533c <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d6c:	f7fe fae6 	bl	800533c <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e164      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7e:	4b26      	ldr	r3, [pc, #152]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f0      	beq.n	8006d6c <HAL_RCC_OscConfig+0x200>
 8006d8a:	e015      	b.n	8006db8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d8c:	4b24      	ldr	r3, [pc, #144]	; (8006e20 <HAL_RCC_OscConfig+0x2b4>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d92:	f7fe fad3 	bl	800533c <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d9a:	f7fe facf 	bl	800533c <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e14d      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f0      	bne.n	8006d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 80a0 	beq.w	8006f06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dca:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10f      	bne.n	8006df6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	4a0e      	ldr	r2, [pc, #56]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de4:	6413      	str	r3, [r2, #64]	; 0x40
 8006de6:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df2:	2301      	movs	r3, #1
 8006df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCC_OscConfig+0x2b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d121      	bne.n	8006e46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <HAL_RCC_OscConfig+0x2b8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a07      	ldr	r2, [pc, #28]	; (8006e24 <HAL_RCC_OscConfig+0x2b8>)
 8006e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e0e:	f7fe fa95 	bl	800533c <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e14:	e011      	b.n	8006e3a <HAL_RCC_OscConfig+0x2ce>
 8006e16:	bf00      	nop
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	42470000 	.word	0x42470000
 8006e20:	42470e80 	.word	0x42470e80
 8006e24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e28:	f7fe fa88 	bl	800533c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e106      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3a:	4b85      	ldr	r3, [pc, #532]	; (8007050 <HAL_RCC_OscConfig+0x4e4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d106      	bne.n	8006e5c <HAL_RCC_OscConfig+0x2f0>
 8006e4e:	4b81      	ldr	r3, [pc, #516]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	4a80      	ldr	r2, [pc, #512]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5a:	e01c      	b.n	8006e96 <HAL_RCC_OscConfig+0x32a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	d10c      	bne.n	8006e7e <HAL_RCC_OscConfig+0x312>
 8006e64:	4b7b      	ldr	r3, [pc, #492]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	4a7a      	ldr	r2, [pc, #488]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e6a:	f043 0304 	orr.w	r3, r3, #4
 8006e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e70:	4b78      	ldr	r3, [pc, #480]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e74:	4a77      	ldr	r2, [pc, #476]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7c:	e00b      	b.n	8006e96 <HAL_RCC_OscConfig+0x32a>
 8006e7e:	4b75      	ldr	r3, [pc, #468]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	4a74      	ldr	r2, [pc, #464]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8a:	4b72      	ldr	r3, [pc, #456]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	4a71      	ldr	r2, [pc, #452]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006e90:	f023 0304 	bic.w	r3, r3, #4
 8006e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d015      	beq.n	8006eca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9e:	f7fe fa4d 	bl	800533c <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea4:	e00a      	b.n	8006ebc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea6:	f7fe fa49 	bl	800533c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e0c5      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebc:	4b65      	ldr	r3, [pc, #404]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0ee      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x33a>
 8006ec8:	e014      	b.n	8006ef4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eca:	f7fe fa37 	bl	800533c <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed0:	e00a      	b.n	8006ee8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed2:	f7fe fa33 	bl	800533c <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e0af      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee8:	4b5a      	ldr	r3, [pc, #360]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1ee      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efa:	4b56      	ldr	r3, [pc, #344]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	4a55      	ldr	r2, [pc, #340]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 809b 	beq.w	8007046 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f10:	4b50      	ldr	r3, [pc, #320]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 030c 	and.w	r3, r3, #12
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d05c      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d141      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f24:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <HAL_RCC_OscConfig+0x4ec>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2a:	f7fe fa07 	bl	800533c <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f32:	f7fe fa03 	bl	800533c <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e081      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f44:	4b43      	ldr	r3, [pc, #268]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f0      	bne.n	8006f32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	019b      	lsls	r3, r3, #6
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	4937      	ldr	r1, [pc, #220]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f7a:	4b37      	ldr	r3, [pc, #220]	; (8007058 <HAL_RCC_OscConfig+0x4ec>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f80:	f7fe f9dc 	bl	800533c <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fe f9d8 	bl	800533c <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e056      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9a:	4b2e      	ldr	r3, [pc, #184]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x41c>
 8006fa6:	e04e      	b.n	8007046 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa8:	4b2b      	ldr	r3, [pc, #172]	; (8007058 <HAL_RCC_OscConfig+0x4ec>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fae:	f7fe f9c5 	bl	800533c <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fe f9c1 	bl	800533c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e03f      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc8:	4b22      	ldr	r3, [pc, #136]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x44a>
 8006fd4:	e037      	b.n	8007046 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e032      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fe2:	4b1c      	ldr	r3, [pc, #112]	; (8007054 <HAL_RCC_OscConfig+0x4e8>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d028      	beq.n	8007042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d121      	bne.n	8007042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d11a      	bne.n	8007042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007012:	4013      	ands	r3, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007018:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800701a:	4293      	cmp	r3, r2
 800701c:	d111      	bne.n	8007042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	3b01      	subs	r3, #1
 800702c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800702e:	429a      	cmp	r2, r3
 8007030:	d107      	bne.n	8007042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d001      	beq.n	8007046 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40007000 	.word	0x40007000
 8007054:	40023800 	.word	0x40023800
 8007058:	42470060 	.word	0x42470060

0800705c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0cc      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007070:	4b68      	ldr	r3, [pc, #416]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d90c      	bls.n	8007098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707e:	4b65      	ldr	r3, [pc, #404]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	4b63      	ldr	r3, [pc, #396]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d001      	beq.n	8007098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0b8      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d020      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b0:	4b59      	ldr	r3, [pc, #356]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4a58      	ldr	r2, [pc, #352]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070c8:	4b53      	ldr	r3, [pc, #332]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4a52      	ldr	r2, [pc, #328]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070d4:	4b50      	ldr	r3, [pc, #320]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	494d      	ldr	r1, [pc, #308]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d044      	beq.n	800717c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d107      	bne.n	800710a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fa:	4b47      	ldr	r3, [pc, #284]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d119      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e07f      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d003      	beq.n	800711a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007116:	2b03      	cmp	r3, #3
 8007118:	d107      	bne.n	800712a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711a:	4b3f      	ldr	r3, [pc, #252]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e06f      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712a:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e067      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713a:	4b37      	ldr	r3, [pc, #220]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f023 0203 	bic.w	r2, r3, #3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	4934      	ldr	r1, [pc, #208]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 8007148:	4313      	orrs	r3, r2
 800714a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800714c:	f7fe f8f6 	bl	800533c <HAL_GetTick>
 8007150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007152:	e00a      	b.n	800716a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007154:	f7fe f8f2 	bl	800533c <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007162:	4293      	cmp	r3, r2
 8007164:	d901      	bls.n	800716a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e04f      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716a:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 020c 	and.w	r2, r3, #12
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	429a      	cmp	r2, r3
 800717a:	d1eb      	bne.n	8007154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d20c      	bcs.n	80071a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b22      	ldr	r3, [pc, #136]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007192:	4b20      	ldr	r3, [pc, #128]	; (8007214 <HAL_RCC_ClockConfig+0x1b8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d001      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e032      	b.n	800720a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b0:	4b19      	ldr	r3, [pc, #100]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4916      	ldr	r1, [pc, #88]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	490e      	ldr	r1, [pc, #56]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071e2:	f000 f821 	bl	8007228 <HAL_RCC_GetSysClockFreq>
 80071e6:	4601      	mov	r1, r0
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <HAL_RCC_ClockConfig+0x1c0>)
 80071f4:	5cd3      	ldrb	r3, [r2, r3]
 80071f6:	fa21 f303 	lsr.w	r3, r1, r3
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_RCC_ClockConfig+0x1c8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f856 	bl	80052b4 <HAL_InitTick>

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023c00 	.word	0x40023c00
 8007218:	40023800 	.word	0x40023800
 800721c:	080089f4 	.word	0x080089f4
 8007220:	20000010 	.word	0x20000010
 8007224:	20000014 	.word	0x20000014

08007228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	2300      	movs	r3, #0
 8007238:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800723e:	4b50      	ldr	r3, [pc, #320]	; (8007380 <HAL_RCC_GetSysClockFreq+0x158>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 030c 	and.w	r3, r3, #12
 8007246:	2b04      	cmp	r3, #4
 8007248:	d007      	beq.n	800725a <HAL_RCC_GetSysClockFreq+0x32>
 800724a:	2b08      	cmp	r3, #8
 800724c:	d008      	beq.n	8007260 <HAL_RCC_GetSysClockFreq+0x38>
 800724e:	2b00      	cmp	r3, #0
 8007250:	f040 808d 	bne.w	800736e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007254:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007256:	60bb      	str	r3, [r7, #8]
       break;
 8007258:	e08c      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800725a:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_RCC_GetSysClockFreq+0x160>)
 800725c:	60bb      	str	r3, [r7, #8]
      break;
 800725e:	e089      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007260:	4b47      	ldr	r3, [pc, #284]	; (8007380 <HAL_RCC_GetSysClockFreq+0x158>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007268:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800726a:	4b45      	ldr	r3, [pc, #276]	; (8007380 <HAL_RCC_GetSysClockFreq+0x158>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d023      	beq.n	80072be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007276:	4b42      	ldr	r3, [pc, #264]	; (8007380 <HAL_RCC_GetSysClockFreq+0x158>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	099b      	lsrs	r3, r3, #6
 800727c:	f04f 0400 	mov.w	r4, #0
 8007280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	ea03 0501 	and.w	r5, r3, r1
 800728c:	ea04 0602 	and.w	r6, r4, r2
 8007290:	4a3d      	ldr	r2, [pc, #244]	; (8007388 <HAL_RCC_GetSysClockFreq+0x160>)
 8007292:	fb02 f106 	mul.w	r1, r2, r6
 8007296:	2200      	movs	r2, #0
 8007298:	fb02 f205 	mul.w	r2, r2, r5
 800729c:	440a      	add	r2, r1
 800729e:	493a      	ldr	r1, [pc, #232]	; (8007388 <HAL_RCC_GetSysClockFreq+0x160>)
 80072a0:	fba5 0101 	umull	r0, r1, r5, r1
 80072a4:	1853      	adds	r3, r2, r1
 80072a6:	4619      	mov	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f04f 0400 	mov.w	r4, #0
 80072ae:	461a      	mov	r2, r3
 80072b0:	4623      	mov	r3, r4
 80072b2:	f7fc ff9b 	bl	80041ec <__aeabi_uldivmod>
 80072b6:	4603      	mov	r3, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e049      	b.n	8007352 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072be:	4b30      	ldr	r3, [pc, #192]	; (8007380 <HAL_RCC_GetSysClockFreq+0x158>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	099b      	lsrs	r3, r3, #6
 80072c4:	f04f 0400 	mov.w	r4, #0
 80072c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	ea03 0501 	and.w	r5, r3, r1
 80072d4:	ea04 0602 	and.w	r6, r4, r2
 80072d8:	4629      	mov	r1, r5
 80072da:	4632      	mov	r2, r6
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	f04f 0400 	mov.w	r4, #0
 80072e4:	0154      	lsls	r4, r2, #5
 80072e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072ea:	014b      	lsls	r3, r1, #5
 80072ec:	4619      	mov	r1, r3
 80072ee:	4622      	mov	r2, r4
 80072f0:	1b49      	subs	r1, r1, r5
 80072f2:	eb62 0206 	sbc.w	r2, r2, r6
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	f04f 0400 	mov.w	r4, #0
 80072fe:	0194      	lsls	r4, r2, #6
 8007300:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007304:	018b      	lsls	r3, r1, #6
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	eb64 0402 	sbc.w	r4, r4, r2
 800730c:	f04f 0100 	mov.w	r1, #0
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	00e2      	lsls	r2, r4, #3
 8007316:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800731a:	00d9      	lsls	r1, r3, #3
 800731c:	460b      	mov	r3, r1
 800731e:	4614      	mov	r4, r2
 8007320:	195b      	adds	r3, r3, r5
 8007322:	eb44 0406 	adc.w	r4, r4, r6
 8007326:	f04f 0100 	mov.w	r1, #0
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	02a2      	lsls	r2, r4, #10
 8007330:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007334:	0299      	lsls	r1, r3, #10
 8007336:	460b      	mov	r3, r1
 8007338:	4614      	mov	r4, r2
 800733a:	4618      	mov	r0, r3
 800733c:	4621      	mov	r1, r4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f04f 0400 	mov.w	r4, #0
 8007344:	461a      	mov	r2, r3
 8007346:	4623      	mov	r3, r4
 8007348:	f7fc ff50 	bl	80041ec <__aeabi_uldivmod>
 800734c:	4603      	mov	r3, r0
 800734e:	460c      	mov	r4, r1
 8007350:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <HAL_RCC_GetSysClockFreq+0x158>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	3301      	adds	r3, #1
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	fbb2 f3f3 	udiv	r3, r2, r3
 800736a:	60bb      	str	r3, [r7, #8]
      break;
 800736c:	e002      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007370:	60bb      	str	r3, [r7, #8]
      break;
 8007372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007374:	68bb      	ldr	r3, [r7, #8]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737e:	bf00      	nop
 8007380:	40023800 	.word	0x40023800
 8007384:	00f42400 	.word	0x00f42400
 8007388:	017d7840 	.word	0x017d7840

0800738c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007390:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007392:	681b      	ldr	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000010 	.word	0x20000010

080073a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073a8:	f7ff fff0 	bl	800738c <HAL_RCC_GetHCLKFreq>
 80073ac:	4601      	mov	r1, r0
 80073ae:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	0a9b      	lsrs	r3, r3, #10
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	4a03      	ldr	r2, [pc, #12]	; (80073c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ba:	5cd3      	ldrb	r3, [r2, r3]
 80073bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40023800 	.word	0x40023800
 80073c8:	08008a04 	.word	0x08008a04

080073cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073d0:	f7ff ffdc 	bl	800738c <HAL_RCC_GetHCLKFreq>
 80073d4:	4601      	mov	r1, r0
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	0b5b      	lsrs	r3, r3, #13
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	4a03      	ldr	r2, [pc, #12]	; (80073f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40023800 	.word	0x40023800
 80073f0:	08008a04 	.word	0x08008a04

080073f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007424:	2b00      	cmp	r3, #0
 8007426:	d075      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007428:	4bad      	ldr	r3, [pc, #692]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800742e:	f7fd ff85 	bl	800533c <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007436:	f7fd ff81 	bl	800533c <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e18b      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007448:	4ba6      	ldr	r3, [pc, #664]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f0      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	019a      	lsls	r2, r3, #6
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	071b      	lsls	r3, r3, #28
 800746c:	499d      	ldr	r1, [pc, #628]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007480:	4b98      	ldr	r3, [pc, #608]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007486:	0f1b      	lsrs	r3, r3, #28
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	019a      	lsls	r2, r3, #6
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	061b      	lsls	r3, r3, #24
 800749a:	431a      	orrs	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	071b      	lsls	r3, r3, #28
 80074a0:	4990      	ldr	r1, [pc, #576]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074a8:	4b8e      	ldr	r3, [pc, #568]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ae:	f023 021f 	bic.w	r2, r3, #31
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	498a      	ldr	r1, [pc, #552]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00d      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	019a      	lsls	r2, r3, #6
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	061b      	lsls	r3, r3, #24
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	071b      	lsls	r3, r3, #28
 80074e0:	4980      	ldr	r1, [pc, #512]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074e8:	4b7d      	ldr	r3, [pc, #500]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074ee:	f7fd ff25 	bl	800533c <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f4:	e008      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074f6:	f7fd ff21 	bl	800533c <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e12b      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007508:	4b76      	ldr	r3, [pc, #472]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0f0      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007528:	2b00      	cmp	r3, #0
 800752a:	d079      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800752c:	4b6e      	ldr	r3, [pc, #440]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007532:	f7fd ff03 	bl	800533c <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007538:	e008      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800753a:	f7fd feff 	bl	800533c <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e109      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800754c:	4b65      	ldr	r3, [pc, #404]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007558:	d0ef      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d020      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007566:	4b5f      	ldr	r3, [pc, #380]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756c:	0f1b      	lsrs	r3, r3, #28
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	019a      	lsls	r2, r3, #6
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	061b      	lsls	r3, r3, #24
 8007580:	431a      	orrs	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	071b      	lsls	r3, r3, #28
 8007586:	4957      	ldr	r1, [pc, #348]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800758e:	4b55      	ldr	r3, [pc, #340]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007594:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	3b01      	subs	r3, #1
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	4950      	ldr	r1, [pc, #320]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01e      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075b4:	4b4b      	ldr	r3, [pc, #300]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	0e1b      	lsrs	r3, r3, #24
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	019a      	lsls	r2, r3, #6
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	071b      	lsls	r3, r3, #28
 80075d4:	4943      	ldr	r1, [pc, #268]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075dc:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	493e      	ldr	r1, [pc, #248]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075f2:	4b3d      	ldr	r3, [pc, #244]	; (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075f8:	f7fd fea0 	bl	800533c <HAL_GetTick>
 80075fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075fe:	e008      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007600:	f7fd fe9c 	bl	800533c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e0a6      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007612:	4b34      	ldr	r3, [pc, #208]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761e:	d1ef      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 808d 	beq.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	4b2c      	ldr	r3, [pc, #176]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	4a2b      	ldr	r2, [pc, #172]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800763c:	6413      	str	r3, [r2, #64]	; 0x40
 800763e:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800764a:	4b28      	ldr	r3, [pc, #160]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a27      	ldr	r2, [pc, #156]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007654:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007656:	f7fd fe71 	bl	800533c <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800765e:	f7fd fe6d 	bl	800533c <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e077      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007670:	4b1e      	ldr	r3, [pc, #120]	; (80076ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800767c:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007684:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d039      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d032      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076a4:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80076b0:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80076b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d11e      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076c2:	f7fd fe3b 	bl	800533c <HAL_GetTick>
 80076c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c8:	e014      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076ca:	f7fd fe37 	bl	800533c <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d8:	4293      	cmp	r3, r2
 80076da:	d90b      	bls.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e03f      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80076e0:	42470068 	.word	0x42470068
 80076e4:	40023800 	.word	0x40023800
 80076e8:	42470070 	.word	0x42470070
 80076ec:	40007000 	.word	0x40007000
 80076f0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f4:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0e4      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770c:	d10d      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800770e:	4b16      	ldr	r3, [pc, #88]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800771e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007722:	4911      	ldr	r1, [pc, #68]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007724:	4313      	orrs	r3, r2
 8007726:	608b      	str	r3, [r1, #8]
 8007728:	e005      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	4a0e      	ldr	r2, [pc, #56]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007730:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007734:	6093      	str	r3, [r2, #8]
 8007736:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007742:	4909      	ldr	r1, [pc, #36]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007744:	4313      	orrs	r3, r2
 8007746:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800775a:	4b04      	ldr	r3, [pc, #16]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800775c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	40023800 	.word	0x40023800
 800776c:	424711e0 	.word	0x424711e0

08007770 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e066      	b.n	8007854 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7f5b      	ldrb	r3, [r3, #29]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fd fbea 	bl	8004f70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	22ca      	movs	r2, #202	; 0xca
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2253      	movs	r2, #83	; 0x53
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f87a 	bl	80078ac <RTC_EnterInitMode>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d12c      	bne.n	800781c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6899      	ldr	r1, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	68d2      	ldr	r2, [r2, #12]
 80077fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6919      	ldr	r1, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	041a      	lsls	r2, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f881 	bl	800791a <RTC_ExitInitMode>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d113      	bne.n	800784a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007830:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699a      	ldr	r2, [r3, #24]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	22ff      	movs	r2, #255	; 0xff
 8007850:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007852:	7bfb      	ldrb	r3, [r7, #15]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007876:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007878:	f7fd fd60 	bl	800533c <HAL_GetTick>
 800787c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800787e:	e009      	b.n	8007894 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007880:	f7fd fd5c 	bl	800533c <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800788e:	d901      	bls.n	8007894 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e007      	b.n	80078a4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0ee      	beq.n	8007880 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d122      	bne.n	8007910 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078da:	f7fd fd2f 	bl	800533c <HAL_GetTick>
 80078de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078e0:	e00c      	b.n	80078fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078e2:	f7fd fd2b 	bl	800533c <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078f0:	d904      	bls.n	80078fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2204      	movs	r2, #4
 80078f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <RTC_EnterInitMode+0x64>
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d1e8      	bne.n	80078e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007934:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 0320 	and.w	r3, r3, #32
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff ff89 	bl	800785c <HAL_RTC_WaitForSynchro>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2204      	movs	r2, #4
 8007954:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3350      	adds	r3, #80	; 0x50
 800797a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3350      	adds	r3, #80	; 0x50
 80079ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e03f      	b.n	8007a5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fd fae8 	bl	8004fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2224      	movs	r2, #36	; 0x24
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f929 	bl	8007c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b08a      	sub	sp, #40	; 0x28
 8007a66:	af02      	add	r7, sp, #8
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d17c      	bne.n	8007b7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <HAL_UART_Transmit+0x2c>
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e075      	b.n	8007b7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_UART_Transmit+0x3e>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e06e      	b.n	8007b7e <HAL_UART_Transmit+0x11c>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2221      	movs	r2, #33	; 0x21
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ab6:	f7fd fc41 	bl	800533c <HAL_GetTick>
 8007aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	88fa      	ldrh	r2, [r7, #6]
 8007ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad0:	d108      	bne.n	8007ae4 <HAL_UART_Transmit+0x82>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d104      	bne.n	8007ae4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	e003      	b.n	8007aec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007af4:	e02a      	b.n	8007b4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2180      	movs	r1, #128	; 0x80
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f840 	bl	8007b86 <UART_WaitOnFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e036      	b.n	8007b7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	3302      	adds	r3, #2
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	e007      	b.n	8007b3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1cf      	bne.n	8007af6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2140      	movs	r1, #64	; 0x40
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f810 	bl	8007b86 <UART_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e006      	b.n	8007b7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e000      	b.n	8007b7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b7c:	2302      	movs	r3, #2
  }
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b090      	sub	sp, #64	; 0x40
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	4613      	mov	r3, r2
 8007b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b96:	e050      	b.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d04c      	beq.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ba6:	f7fd fbc9 	bl	800533c <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d241      	bcs.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	330c      	adds	r3, #12
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	330c      	adds	r3, #12
 8007bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bd6:	637a      	str	r2, [r7, #52]	; 0x34
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3314      	adds	r3, #20
 8007c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0a:	623a      	str	r2, [r7, #32]
 8007c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	69f9      	ldr	r1, [r7, #28]
 8007c10:	6a3a      	ldr	r2, [r7, #32]
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e5      	bne.n	8007bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e00f      	b.n	8007c5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4013      	ands	r3, r2
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	bf0c      	ite	eq
 8007c4a:	2301      	moveq	r3, #1
 8007c4c:	2300      	movne	r3, #0
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d09f      	beq.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3740      	adds	r7, #64	; 0x40
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ca6:	f023 030c 	bic.w	r3, r3, #12
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4ad0      	ldr	r2, [pc, #832]	; (8008010 <UART_SetConfig+0x3ac>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d004      	beq.n	8007cde <UART_SetConfig+0x7a>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4ace      	ldr	r2, [pc, #824]	; (8008014 <UART_SetConfig+0x3b0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d103      	bne.n	8007ce6 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cde:	f7ff fb75 	bl	80073cc <HAL_RCC_GetPCLK2Freq>
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	e002      	b.n	8007cec <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ce6:	f7ff fb5d 	bl	80073a4 <HAL_RCC_GetPCLK1Freq>
 8007cea:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf4:	f040 80ba 	bne.w	8007e6c <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	461d      	mov	r5, r3
 8007cfc:	f04f 0600 	mov.w	r6, #0
 8007d00:	46a8      	mov	r8, r5
 8007d02:	46b1      	mov	r9, r6
 8007d04:	eb18 0308 	adds.w	r3, r8, r8
 8007d08:	eb49 0409 	adc.w	r4, r9, r9
 8007d0c:	4698      	mov	r8, r3
 8007d0e:	46a1      	mov	r9, r4
 8007d10:	eb18 0805 	adds.w	r8, r8, r5
 8007d14:	eb49 0906 	adc.w	r9, r9, r6
 8007d18:	f04f 0100 	mov.w	r1, #0
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d2c:	4688      	mov	r8, r1
 8007d2e:	4691      	mov	r9, r2
 8007d30:	eb18 0005 	adds.w	r0, r8, r5
 8007d34:	eb49 0106 	adc.w	r1, r9, r6
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	461d      	mov	r5, r3
 8007d3e:	f04f 0600 	mov.w	r6, #0
 8007d42:	196b      	adds	r3, r5, r5
 8007d44:	eb46 0406 	adc.w	r4, r6, r6
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	f7fc fa4e 	bl	80041ec <__aeabi_uldivmod>
 8007d50:	4603      	mov	r3, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	461a      	mov	r2, r3
 8007d56:	4bb0      	ldr	r3, [pc, #704]	; (8008018 <UART_SetConfig+0x3b4>)
 8007d58:	fba3 2302 	umull	r2, r3, r3, r2
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	461d      	mov	r5, r3
 8007d66:	f04f 0600 	mov.w	r6, #0
 8007d6a:	46a9      	mov	r9, r5
 8007d6c:	46b2      	mov	sl, r6
 8007d6e:	eb19 0309 	adds.w	r3, r9, r9
 8007d72:	eb4a 040a 	adc.w	r4, sl, sl
 8007d76:	4699      	mov	r9, r3
 8007d78:	46a2      	mov	sl, r4
 8007d7a:	eb19 0905 	adds.w	r9, r9, r5
 8007d7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d82:	f04f 0100 	mov.w	r1, #0
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d96:	4689      	mov	r9, r1
 8007d98:	4692      	mov	sl, r2
 8007d9a:	eb19 0005 	adds.w	r0, r9, r5
 8007d9e:	eb4a 0106 	adc.w	r1, sl, r6
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	461d      	mov	r5, r3
 8007da8:	f04f 0600 	mov.w	r6, #0
 8007dac:	196b      	adds	r3, r5, r5
 8007dae:	eb46 0406 	adc.w	r4, r6, r6
 8007db2:	461a      	mov	r2, r3
 8007db4:	4623      	mov	r3, r4
 8007db6:	f7fc fa19 	bl	80041ec <__aeabi_uldivmod>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4b95      	ldr	r3, [pc, #596]	; (8008018 <UART_SetConfig+0x3b4>)
 8007dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	2164      	movs	r1, #100	; 0x64
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	3332      	adds	r3, #50	; 0x32
 8007dd4:	4a90      	ldr	r2, [pc, #576]	; (8008018 <UART_SetConfig+0x3b4>)
 8007dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007de2:	4498      	add	r8, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	461d      	mov	r5, r3
 8007de8:	f04f 0600 	mov.w	r6, #0
 8007dec:	46a9      	mov	r9, r5
 8007dee:	46b2      	mov	sl, r6
 8007df0:	eb19 0309 	adds.w	r3, r9, r9
 8007df4:	eb4a 040a 	adc.w	r4, sl, sl
 8007df8:	4699      	mov	r9, r3
 8007dfa:	46a2      	mov	sl, r4
 8007dfc:	eb19 0905 	adds.w	r9, r9, r5
 8007e00:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e04:	f04f 0100 	mov.w	r1, #0
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e18:	4689      	mov	r9, r1
 8007e1a:	4692      	mov	sl, r2
 8007e1c:	eb19 0005 	adds.w	r0, r9, r5
 8007e20:	eb4a 0106 	adc.w	r1, sl, r6
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	461d      	mov	r5, r3
 8007e2a:	f04f 0600 	mov.w	r6, #0
 8007e2e:	196b      	adds	r3, r5, r5
 8007e30:	eb46 0406 	adc.w	r4, r6, r6
 8007e34:	461a      	mov	r2, r3
 8007e36:	4623      	mov	r3, r4
 8007e38:	f7fc f9d8 	bl	80041ec <__aeabi_uldivmod>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	461a      	mov	r2, r3
 8007e42:	4b75      	ldr	r3, [pc, #468]	; (8008018 <UART_SetConfig+0x3b4>)
 8007e44:	fba3 1302 	umull	r1, r3, r3, r2
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	2164      	movs	r1, #100	; 0x64
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	3332      	adds	r3, #50	; 0x32
 8007e56:	4a70      	ldr	r2, [pc, #448]	; (8008018 <UART_SetConfig+0x3b4>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	f003 0207 	and.w	r2, r3, #7
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4442      	add	r2, r8
 8007e68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e6a:	e0cc      	b.n	8008006 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	469a      	mov	sl, r3
 8007e70:	f04f 0b00 	mov.w	fp, #0
 8007e74:	46d0      	mov	r8, sl
 8007e76:	46d9      	mov	r9, fp
 8007e78:	eb18 0308 	adds.w	r3, r8, r8
 8007e7c:	eb49 0409 	adc.w	r4, r9, r9
 8007e80:	4698      	mov	r8, r3
 8007e82:	46a1      	mov	r9, r4
 8007e84:	eb18 080a 	adds.w	r8, r8, sl
 8007e88:	eb49 090b 	adc.w	r9, r9, fp
 8007e8c:	f04f 0100 	mov.w	r1, #0
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ea0:	4688      	mov	r8, r1
 8007ea2:	4691      	mov	r9, r2
 8007ea4:	eb1a 0508 	adds.w	r5, sl, r8
 8007ea8:	eb4b 0609 	adc.w	r6, fp, r9
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	f04f 0400 	mov.w	r4, #0
 8007ebe:	0094      	lsls	r4, r2, #2
 8007ec0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ec4:	008b      	lsls	r3, r1, #2
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4623      	mov	r3, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	4631      	mov	r1, r6
 8007ece:	f7fc f98d 	bl	80041ec <__aeabi_uldivmod>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4b4f      	ldr	r3, [pc, #316]	; (8008018 <UART_SetConfig+0x3b4>)
 8007eda:	fba3 2302 	umull	r2, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	469b      	mov	fp, r3
 8007ee8:	f04f 0c00 	mov.w	ip, #0
 8007eec:	46d9      	mov	r9, fp
 8007eee:	46e2      	mov	sl, ip
 8007ef0:	eb19 0309 	adds.w	r3, r9, r9
 8007ef4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ef8:	4699      	mov	r9, r3
 8007efa:	46a2      	mov	sl, r4
 8007efc:	eb19 090b 	adds.w	r9, r9, fp
 8007f00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f04:	f04f 0100 	mov.w	r1, #0
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f18:	4689      	mov	r9, r1
 8007f1a:	4692      	mov	sl, r2
 8007f1c:	eb1b 0509 	adds.w	r5, fp, r9
 8007f20:	eb4c 060a 	adc.w	r6, ip, sl
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	f04f 0400 	mov.w	r4, #0
 8007f36:	0094      	lsls	r4, r2, #2
 8007f38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f3c:	008b      	lsls	r3, r1, #2
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4623      	mov	r3, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	4631      	mov	r1, r6
 8007f46:	f7fc f951 	bl	80041ec <__aeabi_uldivmod>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	461a      	mov	r2, r3
 8007f50:	4b31      	ldr	r3, [pc, #196]	; (8008018 <UART_SetConfig+0x3b4>)
 8007f52:	fba3 1302 	umull	r1, r3, r3, r2
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	2164      	movs	r1, #100	; 0x64
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	3332      	adds	r3, #50	; 0x32
 8007f64:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <UART_SetConfig+0x3b4>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f70:	4498      	add	r8, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	469b      	mov	fp, r3
 8007f76:	f04f 0c00 	mov.w	ip, #0
 8007f7a:	46d9      	mov	r9, fp
 8007f7c:	46e2      	mov	sl, ip
 8007f7e:	eb19 0309 	adds.w	r3, r9, r9
 8007f82:	eb4a 040a 	adc.w	r4, sl, sl
 8007f86:	4699      	mov	r9, r3
 8007f88:	46a2      	mov	sl, r4
 8007f8a:	eb19 090b 	adds.w	r9, r9, fp
 8007f8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f92:	f04f 0100 	mov.w	r1, #0
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	4692      	mov	sl, r2
 8007faa:	eb1b 0509 	adds.w	r5, fp, r9
 8007fae:	eb4c 060a 	adc.w	r6, ip, sl
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	f04f 0400 	mov.w	r4, #0
 8007fc4:	0094      	lsls	r4, r2, #2
 8007fc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fca:	008b      	lsls	r3, r1, #2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4623      	mov	r3, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	f7fc f90a 	bl	80041ec <__aeabi_uldivmod>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <UART_SetConfig+0x3b4>)
 8007fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	2164      	movs	r1, #100	; 0x64
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	3332      	adds	r3, #50	; 0x32
 8007ff2:	4a09      	ldr	r2, [pc, #36]	; (8008018 <UART_SetConfig+0x3b4>)
 8007ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f003 020f 	and.w	r2, r3, #15
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4442      	add	r2, r8
 8008004:	609a      	str	r2, [r3, #8]
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	40011000 	.word	0x40011000
 8008014:	40011400 	.word	0x40011400
 8008018:	51eb851f 	.word	0x51eb851f

0800801c <__errno>:
 800801c:	4b01      	ldr	r3, [pc, #4]	; (8008024 <__errno+0x8>)
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	2000001c 	.word	0x2000001c

08008028 <__libc_init_array>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4e0d      	ldr	r6, [pc, #52]	; (8008060 <__libc_init_array+0x38>)
 800802c:	4c0d      	ldr	r4, [pc, #52]	; (8008064 <__libc_init_array+0x3c>)
 800802e:	1ba4      	subs	r4, r4, r6
 8008030:	10a4      	asrs	r4, r4, #2
 8008032:	2500      	movs	r5, #0
 8008034:	42a5      	cmp	r5, r4
 8008036:	d109      	bne.n	800804c <__libc_init_array+0x24>
 8008038:	4e0b      	ldr	r6, [pc, #44]	; (8008068 <__libc_init_array+0x40>)
 800803a:	4c0c      	ldr	r4, [pc, #48]	; (800806c <__libc_init_array+0x44>)
 800803c:	f000 fc88 	bl	8008950 <_init>
 8008040:	1ba4      	subs	r4, r4, r6
 8008042:	10a4      	asrs	r4, r4, #2
 8008044:	2500      	movs	r5, #0
 8008046:	42a5      	cmp	r5, r4
 8008048:	d105      	bne.n	8008056 <__libc_init_array+0x2e>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008050:	4798      	blx	r3
 8008052:	3501      	adds	r5, #1
 8008054:	e7ee      	b.n	8008034 <__libc_init_array+0xc>
 8008056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800805a:	4798      	blx	r3
 800805c:	3501      	adds	r5, #1
 800805e:	e7f2      	b.n	8008046 <__libc_init_array+0x1e>
 8008060:	08008a78 	.word	0x08008a78
 8008064:	08008a78 	.word	0x08008a78
 8008068:	08008a78 	.word	0x08008a78
 800806c:	08008a7c 	.word	0x08008a7c

08008070 <memset>:
 8008070:	4402      	add	r2, r0
 8008072:	4603      	mov	r3, r0
 8008074:	4293      	cmp	r3, r2
 8008076:	d100      	bne.n	800807a <memset+0xa>
 8008078:	4770      	bx	lr
 800807a:	f803 1b01 	strb.w	r1, [r3], #1
 800807e:	e7f9      	b.n	8008074 <memset+0x4>

08008080 <_puts_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460e      	mov	r6, r1
 8008084:	4605      	mov	r5, r0
 8008086:	b118      	cbz	r0, 8008090 <_puts_r+0x10>
 8008088:	6983      	ldr	r3, [r0, #24]
 800808a:	b90b      	cbnz	r3, 8008090 <_puts_r+0x10>
 800808c:	f000 fa0c 	bl	80084a8 <__sinit>
 8008090:	69ab      	ldr	r3, [r5, #24]
 8008092:	68ac      	ldr	r4, [r5, #8]
 8008094:	b913      	cbnz	r3, 800809c <_puts_r+0x1c>
 8008096:	4628      	mov	r0, r5
 8008098:	f000 fa06 	bl	80084a8 <__sinit>
 800809c:	4b23      	ldr	r3, [pc, #140]	; (800812c <_puts_r+0xac>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d117      	bne.n	80080d2 <_puts_r+0x52>
 80080a2:	686c      	ldr	r4, [r5, #4]
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	071b      	lsls	r3, r3, #28
 80080a8:	d51d      	bpl.n	80080e6 <_puts_r+0x66>
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	b1db      	cbz	r3, 80080e6 <_puts_r+0x66>
 80080ae:	3e01      	subs	r6, #1
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080b6:	3b01      	subs	r3, #1
 80080b8:	60a3      	str	r3, [r4, #8]
 80080ba:	b9e9      	cbnz	r1, 80080f8 <_puts_r+0x78>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da2e      	bge.n	800811e <_puts_r+0x9e>
 80080c0:	4622      	mov	r2, r4
 80080c2:	210a      	movs	r1, #10
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 f83f 	bl	8008148 <__swbuf_r>
 80080ca:	3001      	adds	r0, #1
 80080cc:	d011      	beq.n	80080f2 <_puts_r+0x72>
 80080ce:	200a      	movs	r0, #10
 80080d0:	e011      	b.n	80080f6 <_puts_r+0x76>
 80080d2:	4b17      	ldr	r3, [pc, #92]	; (8008130 <_puts_r+0xb0>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d101      	bne.n	80080dc <_puts_r+0x5c>
 80080d8:	68ac      	ldr	r4, [r5, #8]
 80080da:	e7e3      	b.n	80080a4 <_puts_r+0x24>
 80080dc:	4b15      	ldr	r3, [pc, #84]	; (8008134 <_puts_r+0xb4>)
 80080de:	429c      	cmp	r4, r3
 80080e0:	bf08      	it	eq
 80080e2:	68ec      	ldreq	r4, [r5, #12]
 80080e4:	e7de      	b.n	80080a4 <_puts_r+0x24>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 f87f 	bl	80081ec <__swsetup_r>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d0dd      	beq.n	80080ae <_puts_r+0x2e>
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	da04      	bge.n	8008106 <_puts_r+0x86>
 80080fc:	69a2      	ldr	r2, [r4, #24]
 80080fe:	429a      	cmp	r2, r3
 8008100:	dc06      	bgt.n	8008110 <_puts_r+0x90>
 8008102:	290a      	cmp	r1, #10
 8008104:	d004      	beq.n	8008110 <_puts_r+0x90>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	6022      	str	r2, [r4, #0]
 800810c:	7019      	strb	r1, [r3, #0]
 800810e:	e7cf      	b.n	80080b0 <_puts_r+0x30>
 8008110:	4622      	mov	r2, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 f818 	bl	8008148 <__swbuf_r>
 8008118:	3001      	adds	r0, #1
 800811a:	d1c9      	bne.n	80080b0 <_puts_r+0x30>
 800811c:	e7e9      	b.n	80080f2 <_puts_r+0x72>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	200a      	movs	r0, #10
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	6022      	str	r2, [r4, #0]
 8008126:	7018      	strb	r0, [r3, #0]
 8008128:	e7e5      	b.n	80080f6 <_puts_r+0x76>
 800812a:	bf00      	nop
 800812c:	08008a30 	.word	0x08008a30
 8008130:	08008a50 	.word	0x08008a50
 8008134:	08008a10 	.word	0x08008a10

08008138 <puts>:
 8008138:	4b02      	ldr	r3, [pc, #8]	; (8008144 <puts+0xc>)
 800813a:	4601      	mov	r1, r0
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	f7ff bf9f 	b.w	8008080 <_puts_r>
 8008142:	bf00      	nop
 8008144:	2000001c 	.word	0x2000001c

08008148 <__swbuf_r>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	460e      	mov	r6, r1
 800814c:	4614      	mov	r4, r2
 800814e:	4605      	mov	r5, r0
 8008150:	b118      	cbz	r0, 800815a <__swbuf_r+0x12>
 8008152:	6983      	ldr	r3, [r0, #24]
 8008154:	b90b      	cbnz	r3, 800815a <__swbuf_r+0x12>
 8008156:	f000 f9a7 	bl	80084a8 <__sinit>
 800815a:	4b21      	ldr	r3, [pc, #132]	; (80081e0 <__swbuf_r+0x98>)
 800815c:	429c      	cmp	r4, r3
 800815e:	d12a      	bne.n	80081b6 <__swbuf_r+0x6e>
 8008160:	686c      	ldr	r4, [r5, #4]
 8008162:	69a3      	ldr	r3, [r4, #24]
 8008164:	60a3      	str	r3, [r4, #8]
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	071a      	lsls	r2, r3, #28
 800816a:	d52e      	bpl.n	80081ca <__swbuf_r+0x82>
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	b363      	cbz	r3, 80081ca <__swbuf_r+0x82>
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	1ac0      	subs	r0, r0, r3
 8008176:	6963      	ldr	r3, [r4, #20]
 8008178:	b2f6      	uxtb	r6, r6
 800817a:	4283      	cmp	r3, r0
 800817c:	4637      	mov	r7, r6
 800817e:	dc04      	bgt.n	800818a <__swbuf_r+0x42>
 8008180:	4621      	mov	r1, r4
 8008182:	4628      	mov	r0, r5
 8008184:	f000 f926 	bl	80083d4 <_fflush_r>
 8008188:	bb28      	cbnz	r0, 80081d6 <__swbuf_r+0x8e>
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	3b01      	subs	r3, #1
 800818e:	60a3      	str	r3, [r4, #8]
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	1c5a      	adds	r2, r3, #1
 8008194:	6022      	str	r2, [r4, #0]
 8008196:	701e      	strb	r6, [r3, #0]
 8008198:	6963      	ldr	r3, [r4, #20]
 800819a:	3001      	adds	r0, #1
 800819c:	4283      	cmp	r3, r0
 800819e:	d004      	beq.n	80081aa <__swbuf_r+0x62>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	07db      	lsls	r3, r3, #31
 80081a4:	d519      	bpl.n	80081da <__swbuf_r+0x92>
 80081a6:	2e0a      	cmp	r6, #10
 80081a8:	d117      	bne.n	80081da <__swbuf_r+0x92>
 80081aa:	4621      	mov	r1, r4
 80081ac:	4628      	mov	r0, r5
 80081ae:	f000 f911 	bl	80083d4 <_fflush_r>
 80081b2:	b190      	cbz	r0, 80081da <__swbuf_r+0x92>
 80081b4:	e00f      	b.n	80081d6 <__swbuf_r+0x8e>
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <__swbuf_r+0x9c>)
 80081b8:	429c      	cmp	r4, r3
 80081ba:	d101      	bne.n	80081c0 <__swbuf_r+0x78>
 80081bc:	68ac      	ldr	r4, [r5, #8]
 80081be:	e7d0      	b.n	8008162 <__swbuf_r+0x1a>
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <__swbuf_r+0xa0>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	bf08      	it	eq
 80081c6:	68ec      	ldreq	r4, [r5, #12]
 80081c8:	e7cb      	b.n	8008162 <__swbuf_r+0x1a>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 f80d 	bl	80081ec <__swsetup_r>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0cc      	beq.n	8008170 <__swbuf_r+0x28>
 80081d6:	f04f 37ff 	mov.w	r7, #4294967295
 80081da:	4638      	mov	r0, r7
 80081dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081de:	bf00      	nop
 80081e0:	08008a30 	.word	0x08008a30
 80081e4:	08008a50 	.word	0x08008a50
 80081e8:	08008a10 	.word	0x08008a10

080081ec <__swsetup_r>:
 80081ec:	4b32      	ldr	r3, [pc, #200]	; (80082b8 <__swsetup_r+0xcc>)
 80081ee:	b570      	push	{r4, r5, r6, lr}
 80081f0:	681d      	ldr	r5, [r3, #0]
 80081f2:	4606      	mov	r6, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	b125      	cbz	r5, 8008202 <__swsetup_r+0x16>
 80081f8:	69ab      	ldr	r3, [r5, #24]
 80081fa:	b913      	cbnz	r3, 8008202 <__swsetup_r+0x16>
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f953 	bl	80084a8 <__sinit>
 8008202:	4b2e      	ldr	r3, [pc, #184]	; (80082bc <__swsetup_r+0xd0>)
 8008204:	429c      	cmp	r4, r3
 8008206:	d10f      	bne.n	8008228 <__swsetup_r+0x3c>
 8008208:	686c      	ldr	r4, [r5, #4]
 800820a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800820e:	b29a      	uxth	r2, r3
 8008210:	0715      	lsls	r5, r2, #28
 8008212:	d42c      	bmi.n	800826e <__swsetup_r+0x82>
 8008214:	06d0      	lsls	r0, r2, #27
 8008216:	d411      	bmi.n	800823c <__swsetup_r+0x50>
 8008218:	2209      	movs	r2, #9
 800821a:	6032      	str	r2, [r6, #0]
 800821c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008220:	81a3      	strh	r3, [r4, #12]
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	e03e      	b.n	80082a6 <__swsetup_r+0xba>
 8008228:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <__swsetup_r+0xd4>)
 800822a:	429c      	cmp	r4, r3
 800822c:	d101      	bne.n	8008232 <__swsetup_r+0x46>
 800822e:	68ac      	ldr	r4, [r5, #8]
 8008230:	e7eb      	b.n	800820a <__swsetup_r+0x1e>
 8008232:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <__swsetup_r+0xd8>)
 8008234:	429c      	cmp	r4, r3
 8008236:	bf08      	it	eq
 8008238:	68ec      	ldreq	r4, [r5, #12]
 800823a:	e7e6      	b.n	800820a <__swsetup_r+0x1e>
 800823c:	0751      	lsls	r1, r2, #29
 800823e:	d512      	bpl.n	8008266 <__swsetup_r+0x7a>
 8008240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008242:	b141      	cbz	r1, 8008256 <__swsetup_r+0x6a>
 8008244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008248:	4299      	cmp	r1, r3
 800824a:	d002      	beq.n	8008252 <__swsetup_r+0x66>
 800824c:	4630      	mov	r0, r6
 800824e:	f000 fa19 	bl	8008684 <_free_r>
 8008252:	2300      	movs	r3, #0
 8008254:	6363      	str	r3, [r4, #52]	; 0x34
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	2300      	movs	r3, #0
 8008260:	6063      	str	r3, [r4, #4]
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	b94b      	cbnz	r3, 8008286 <__swsetup_r+0x9a>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800827c:	d003      	beq.n	8008286 <__swsetup_r+0x9a>
 800827e:	4621      	mov	r1, r4
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f9bf 	bl	8008604 <__smakebuf_r>
 8008286:	89a2      	ldrh	r2, [r4, #12]
 8008288:	f012 0301 	ands.w	r3, r2, #1
 800828c:	d00c      	beq.n	80082a8 <__swsetup_r+0xbc>
 800828e:	2300      	movs	r3, #0
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	6963      	ldr	r3, [r4, #20]
 8008294:	425b      	negs	r3, r3
 8008296:	61a3      	str	r3, [r4, #24]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	b953      	cbnz	r3, 80082b2 <__swsetup_r+0xc6>
 800829c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80082a4:	d1ba      	bne.n	800821c <__swsetup_r+0x30>
 80082a6:	bd70      	pop	{r4, r5, r6, pc}
 80082a8:	0792      	lsls	r2, r2, #30
 80082aa:	bf58      	it	pl
 80082ac:	6963      	ldrpl	r3, [r4, #20]
 80082ae:	60a3      	str	r3, [r4, #8]
 80082b0:	e7f2      	b.n	8008298 <__swsetup_r+0xac>
 80082b2:	2000      	movs	r0, #0
 80082b4:	e7f7      	b.n	80082a6 <__swsetup_r+0xba>
 80082b6:	bf00      	nop
 80082b8:	2000001c 	.word	0x2000001c
 80082bc:	08008a30 	.word	0x08008a30
 80082c0:	08008a50 	.word	0x08008a50
 80082c4:	08008a10 	.word	0x08008a10

080082c8 <__sflush_r>:
 80082c8:	898a      	ldrh	r2, [r1, #12]
 80082ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	4605      	mov	r5, r0
 80082d0:	0710      	lsls	r0, r2, #28
 80082d2:	460c      	mov	r4, r1
 80082d4:	d458      	bmi.n	8008388 <__sflush_r+0xc0>
 80082d6:	684b      	ldr	r3, [r1, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dc05      	bgt.n	80082e8 <__sflush_r+0x20>
 80082dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dc02      	bgt.n	80082e8 <__sflush_r+0x20>
 80082e2:	2000      	movs	r0, #0
 80082e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	d0f9      	beq.n	80082e2 <__sflush_r+0x1a>
 80082ee:	2300      	movs	r3, #0
 80082f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082f4:	682f      	ldr	r7, [r5, #0]
 80082f6:	6a21      	ldr	r1, [r4, #32]
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	d032      	beq.n	8008362 <__sflush_r+0x9a>
 80082fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	075a      	lsls	r2, r3, #29
 8008302:	d505      	bpl.n	8008310 <__sflush_r+0x48>
 8008304:	6863      	ldr	r3, [r4, #4]
 8008306:	1ac0      	subs	r0, r0, r3
 8008308:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800830a:	b10b      	cbz	r3, 8008310 <__sflush_r+0x48>
 800830c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800830e:	1ac0      	subs	r0, r0, r3
 8008310:	2300      	movs	r3, #0
 8008312:	4602      	mov	r2, r0
 8008314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008316:	6a21      	ldr	r1, [r4, #32]
 8008318:	4628      	mov	r0, r5
 800831a:	47b0      	blx	r6
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	d106      	bne.n	8008330 <__sflush_r+0x68>
 8008322:	6829      	ldr	r1, [r5, #0]
 8008324:	291d      	cmp	r1, #29
 8008326:	d848      	bhi.n	80083ba <__sflush_r+0xf2>
 8008328:	4a29      	ldr	r2, [pc, #164]	; (80083d0 <__sflush_r+0x108>)
 800832a:	40ca      	lsrs	r2, r1
 800832c:	07d6      	lsls	r6, r2, #31
 800832e:	d544      	bpl.n	80083ba <__sflush_r+0xf2>
 8008330:	2200      	movs	r2, #0
 8008332:	6062      	str	r2, [r4, #4]
 8008334:	04d9      	lsls	r1, r3, #19
 8008336:	6922      	ldr	r2, [r4, #16]
 8008338:	6022      	str	r2, [r4, #0]
 800833a:	d504      	bpl.n	8008346 <__sflush_r+0x7e>
 800833c:	1c42      	adds	r2, r0, #1
 800833e:	d101      	bne.n	8008344 <__sflush_r+0x7c>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b903      	cbnz	r3, 8008346 <__sflush_r+0x7e>
 8008344:	6560      	str	r0, [r4, #84]	; 0x54
 8008346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008348:	602f      	str	r7, [r5, #0]
 800834a:	2900      	cmp	r1, #0
 800834c:	d0c9      	beq.n	80082e2 <__sflush_r+0x1a>
 800834e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008352:	4299      	cmp	r1, r3
 8008354:	d002      	beq.n	800835c <__sflush_r+0x94>
 8008356:	4628      	mov	r0, r5
 8008358:	f000 f994 	bl	8008684 <_free_r>
 800835c:	2000      	movs	r0, #0
 800835e:	6360      	str	r0, [r4, #52]	; 0x34
 8008360:	e7c0      	b.n	80082e4 <__sflush_r+0x1c>
 8008362:	2301      	movs	r3, #1
 8008364:	4628      	mov	r0, r5
 8008366:	47b0      	blx	r6
 8008368:	1c41      	adds	r1, r0, #1
 800836a:	d1c8      	bne.n	80082fe <__sflush_r+0x36>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0c5      	beq.n	80082fe <__sflush_r+0x36>
 8008372:	2b1d      	cmp	r3, #29
 8008374:	d001      	beq.n	800837a <__sflush_r+0xb2>
 8008376:	2b16      	cmp	r3, #22
 8008378:	d101      	bne.n	800837e <__sflush_r+0xb6>
 800837a:	602f      	str	r7, [r5, #0]
 800837c:	e7b1      	b.n	80082e2 <__sflush_r+0x1a>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008384:	81a3      	strh	r3, [r4, #12]
 8008386:	e7ad      	b.n	80082e4 <__sflush_r+0x1c>
 8008388:	690f      	ldr	r7, [r1, #16]
 800838a:	2f00      	cmp	r7, #0
 800838c:	d0a9      	beq.n	80082e2 <__sflush_r+0x1a>
 800838e:	0793      	lsls	r3, r2, #30
 8008390:	680e      	ldr	r6, [r1, #0]
 8008392:	bf08      	it	eq
 8008394:	694b      	ldreq	r3, [r1, #20]
 8008396:	600f      	str	r7, [r1, #0]
 8008398:	bf18      	it	ne
 800839a:	2300      	movne	r3, #0
 800839c:	eba6 0807 	sub.w	r8, r6, r7
 80083a0:	608b      	str	r3, [r1, #8]
 80083a2:	f1b8 0f00 	cmp.w	r8, #0
 80083a6:	dd9c      	ble.n	80082e2 <__sflush_r+0x1a>
 80083a8:	4643      	mov	r3, r8
 80083aa:	463a      	mov	r2, r7
 80083ac:	6a21      	ldr	r1, [r4, #32]
 80083ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083b0:	4628      	mov	r0, r5
 80083b2:	47b0      	blx	r6
 80083b4:	2800      	cmp	r0, #0
 80083b6:	dc06      	bgt.n	80083c6 <__sflush_r+0xfe>
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	e78e      	b.n	80082e4 <__sflush_r+0x1c>
 80083c6:	4407      	add	r7, r0
 80083c8:	eba8 0800 	sub.w	r8, r8, r0
 80083cc:	e7e9      	b.n	80083a2 <__sflush_r+0xda>
 80083ce:	bf00      	nop
 80083d0:	20400001 	.word	0x20400001

080083d4 <_fflush_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	690b      	ldr	r3, [r1, #16]
 80083d8:	4605      	mov	r5, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	b1db      	cbz	r3, 8008416 <_fflush_r+0x42>
 80083de:	b118      	cbz	r0, 80083e8 <_fflush_r+0x14>
 80083e0:	6983      	ldr	r3, [r0, #24]
 80083e2:	b90b      	cbnz	r3, 80083e8 <_fflush_r+0x14>
 80083e4:	f000 f860 	bl	80084a8 <__sinit>
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <_fflush_r+0x48>)
 80083ea:	429c      	cmp	r4, r3
 80083ec:	d109      	bne.n	8008402 <_fflush_r+0x2e>
 80083ee:	686c      	ldr	r4, [r5, #4]
 80083f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f4:	b17b      	cbz	r3, 8008416 <_fflush_r+0x42>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083fe:	f7ff bf63 	b.w	80082c8 <__sflush_r>
 8008402:	4b07      	ldr	r3, [pc, #28]	; (8008420 <_fflush_r+0x4c>)
 8008404:	429c      	cmp	r4, r3
 8008406:	d101      	bne.n	800840c <_fflush_r+0x38>
 8008408:	68ac      	ldr	r4, [r5, #8]
 800840a:	e7f1      	b.n	80083f0 <_fflush_r+0x1c>
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <_fflush_r+0x50>)
 800840e:	429c      	cmp	r4, r3
 8008410:	bf08      	it	eq
 8008412:	68ec      	ldreq	r4, [r5, #12]
 8008414:	e7ec      	b.n	80083f0 <_fflush_r+0x1c>
 8008416:	2000      	movs	r0, #0
 8008418:	bd38      	pop	{r3, r4, r5, pc}
 800841a:	bf00      	nop
 800841c:	08008a30 	.word	0x08008a30
 8008420:	08008a50 	.word	0x08008a50
 8008424:	08008a10 	.word	0x08008a10

08008428 <std>:
 8008428:	2300      	movs	r3, #0
 800842a:	b510      	push	{r4, lr}
 800842c:	4604      	mov	r4, r0
 800842e:	e9c0 3300 	strd	r3, r3, [r0]
 8008432:	6083      	str	r3, [r0, #8]
 8008434:	8181      	strh	r1, [r0, #12]
 8008436:	6643      	str	r3, [r0, #100]	; 0x64
 8008438:	81c2      	strh	r2, [r0, #14]
 800843a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800843e:	6183      	str	r3, [r0, #24]
 8008440:	4619      	mov	r1, r3
 8008442:	2208      	movs	r2, #8
 8008444:	305c      	adds	r0, #92	; 0x5c
 8008446:	f7ff fe13 	bl	8008070 <memset>
 800844a:	4b05      	ldr	r3, [pc, #20]	; (8008460 <std+0x38>)
 800844c:	6263      	str	r3, [r4, #36]	; 0x24
 800844e:	4b05      	ldr	r3, [pc, #20]	; (8008464 <std+0x3c>)
 8008450:	62a3      	str	r3, [r4, #40]	; 0x28
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <std+0x40>)
 8008454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <std+0x44>)
 8008458:	6224      	str	r4, [r4, #32]
 800845a:	6323      	str	r3, [r4, #48]	; 0x30
 800845c:	bd10      	pop	{r4, pc}
 800845e:	bf00      	nop
 8008460:	080087f5 	.word	0x080087f5
 8008464:	08008817 	.word	0x08008817
 8008468:	0800884f 	.word	0x0800884f
 800846c:	08008873 	.word	0x08008873

08008470 <_cleanup_r>:
 8008470:	4901      	ldr	r1, [pc, #4]	; (8008478 <_cleanup_r+0x8>)
 8008472:	f000 b885 	b.w	8008580 <_fwalk_reent>
 8008476:	bf00      	nop
 8008478:	080083d5 	.word	0x080083d5

0800847c <__sfmoreglue>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	1e4a      	subs	r2, r1, #1
 8008480:	2568      	movs	r5, #104	; 0x68
 8008482:	4355      	muls	r5, r2
 8008484:	460e      	mov	r6, r1
 8008486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800848a:	f000 f949 	bl	8008720 <_malloc_r>
 800848e:	4604      	mov	r4, r0
 8008490:	b140      	cbz	r0, 80084a4 <__sfmoreglue+0x28>
 8008492:	2100      	movs	r1, #0
 8008494:	e9c0 1600 	strd	r1, r6, [r0]
 8008498:	300c      	adds	r0, #12
 800849a:	60a0      	str	r0, [r4, #8]
 800849c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084a0:	f7ff fde6 	bl	8008070 <memset>
 80084a4:	4620      	mov	r0, r4
 80084a6:	bd70      	pop	{r4, r5, r6, pc}

080084a8 <__sinit>:
 80084a8:	6983      	ldr	r3, [r0, #24]
 80084aa:	b510      	push	{r4, lr}
 80084ac:	4604      	mov	r4, r0
 80084ae:	bb33      	cbnz	r3, 80084fe <__sinit+0x56>
 80084b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80084b4:	6503      	str	r3, [r0, #80]	; 0x50
 80084b6:	4b12      	ldr	r3, [pc, #72]	; (8008500 <__sinit+0x58>)
 80084b8:	4a12      	ldr	r2, [pc, #72]	; (8008504 <__sinit+0x5c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6282      	str	r2, [r0, #40]	; 0x28
 80084be:	4298      	cmp	r0, r3
 80084c0:	bf04      	itt	eq
 80084c2:	2301      	moveq	r3, #1
 80084c4:	6183      	streq	r3, [r0, #24]
 80084c6:	f000 f81f 	bl	8008508 <__sfp>
 80084ca:	6060      	str	r0, [r4, #4]
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 f81b 	bl	8008508 <__sfp>
 80084d2:	60a0      	str	r0, [r4, #8]
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 f817 	bl	8008508 <__sfp>
 80084da:	2200      	movs	r2, #0
 80084dc:	60e0      	str	r0, [r4, #12]
 80084de:	2104      	movs	r1, #4
 80084e0:	6860      	ldr	r0, [r4, #4]
 80084e2:	f7ff ffa1 	bl	8008428 <std>
 80084e6:	2201      	movs	r2, #1
 80084e8:	2109      	movs	r1, #9
 80084ea:	68a0      	ldr	r0, [r4, #8]
 80084ec:	f7ff ff9c 	bl	8008428 <std>
 80084f0:	2202      	movs	r2, #2
 80084f2:	2112      	movs	r1, #18
 80084f4:	68e0      	ldr	r0, [r4, #12]
 80084f6:	f7ff ff97 	bl	8008428 <std>
 80084fa:	2301      	movs	r3, #1
 80084fc:	61a3      	str	r3, [r4, #24]
 80084fe:	bd10      	pop	{r4, pc}
 8008500:	08008a0c 	.word	0x08008a0c
 8008504:	08008471 	.word	0x08008471

08008508 <__sfp>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <__sfp+0x70>)
 800850c:	681e      	ldr	r6, [r3, #0]
 800850e:	69b3      	ldr	r3, [r6, #24]
 8008510:	4607      	mov	r7, r0
 8008512:	b913      	cbnz	r3, 800851a <__sfp+0x12>
 8008514:	4630      	mov	r0, r6
 8008516:	f7ff ffc7 	bl	80084a8 <__sinit>
 800851a:	3648      	adds	r6, #72	; 0x48
 800851c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008520:	3b01      	subs	r3, #1
 8008522:	d503      	bpl.n	800852c <__sfp+0x24>
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	b133      	cbz	r3, 8008536 <__sfp+0x2e>
 8008528:	6836      	ldr	r6, [r6, #0]
 800852a:	e7f7      	b.n	800851c <__sfp+0x14>
 800852c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008530:	b16d      	cbz	r5, 800854e <__sfp+0x46>
 8008532:	3468      	adds	r4, #104	; 0x68
 8008534:	e7f4      	b.n	8008520 <__sfp+0x18>
 8008536:	2104      	movs	r1, #4
 8008538:	4638      	mov	r0, r7
 800853a:	f7ff ff9f 	bl	800847c <__sfmoreglue>
 800853e:	6030      	str	r0, [r6, #0]
 8008540:	2800      	cmp	r0, #0
 8008542:	d1f1      	bne.n	8008528 <__sfp+0x20>
 8008544:	230c      	movs	r3, #12
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	4604      	mov	r4, r0
 800854a:	4620      	mov	r0, r4
 800854c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854e:	4b0b      	ldr	r3, [pc, #44]	; (800857c <__sfp+0x74>)
 8008550:	6665      	str	r5, [r4, #100]	; 0x64
 8008552:	e9c4 5500 	strd	r5, r5, [r4]
 8008556:	60a5      	str	r5, [r4, #8]
 8008558:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800855c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008560:	2208      	movs	r2, #8
 8008562:	4629      	mov	r1, r5
 8008564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008568:	f7ff fd82 	bl	8008070 <memset>
 800856c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008574:	e7e9      	b.n	800854a <__sfp+0x42>
 8008576:	bf00      	nop
 8008578:	08008a0c 	.word	0x08008a0c
 800857c:	ffff0001 	.word	0xffff0001

08008580 <_fwalk_reent>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800858c:	2600      	movs	r6, #0
 800858e:	b914      	cbnz	r4, 8008596 <_fwalk_reent+0x16>
 8008590:	4630      	mov	r0, r6
 8008592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008596:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800859a:	3f01      	subs	r7, #1
 800859c:	d501      	bpl.n	80085a2 <_fwalk_reent+0x22>
 800859e:	6824      	ldr	r4, [r4, #0]
 80085a0:	e7f5      	b.n	800858e <_fwalk_reent+0xe>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d907      	bls.n	80085b8 <_fwalk_reent+0x38>
 80085a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085ac:	3301      	adds	r3, #1
 80085ae:	d003      	beq.n	80085b8 <_fwalk_reent+0x38>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4640      	mov	r0, r8
 80085b4:	47c8      	blx	r9
 80085b6:	4306      	orrs	r6, r0
 80085b8:	3568      	adds	r5, #104	; 0x68
 80085ba:	e7ee      	b.n	800859a <_fwalk_reent+0x1a>

080085bc <__swhatbuf_r>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460e      	mov	r6, r1
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	2900      	cmp	r1, #0
 80085c6:	b096      	sub	sp, #88	; 0x58
 80085c8:	4614      	mov	r4, r2
 80085ca:	461d      	mov	r5, r3
 80085cc:	da07      	bge.n	80085de <__swhatbuf_r+0x22>
 80085ce:	2300      	movs	r3, #0
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	89b3      	ldrh	r3, [r6, #12]
 80085d4:	061a      	lsls	r2, r3, #24
 80085d6:	d410      	bmi.n	80085fa <__swhatbuf_r+0x3e>
 80085d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085dc:	e00e      	b.n	80085fc <__swhatbuf_r+0x40>
 80085de:	466a      	mov	r2, sp
 80085e0:	f000 f96e 	bl	80088c0 <_fstat_r>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	dbf2      	blt.n	80085ce <__swhatbuf_r+0x12>
 80085e8:	9a01      	ldr	r2, [sp, #4]
 80085ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085f2:	425a      	negs	r2, r3
 80085f4:	415a      	adcs	r2, r3
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	e7ee      	b.n	80085d8 <__swhatbuf_r+0x1c>
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	2000      	movs	r0, #0
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	b016      	add	sp, #88	; 0x58
 8008602:	bd70      	pop	{r4, r5, r6, pc}

08008604 <__smakebuf_r>:
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008608:	079d      	lsls	r5, r3, #30
 800860a:	4606      	mov	r6, r0
 800860c:	460c      	mov	r4, r1
 800860e:	d507      	bpl.n	8008620 <__smakebuf_r+0x1c>
 8008610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	2301      	movs	r3, #1
 800861a:	6163      	str	r3, [r4, #20]
 800861c:	b002      	add	sp, #8
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	ab01      	add	r3, sp, #4
 8008622:	466a      	mov	r2, sp
 8008624:	f7ff ffca 	bl	80085bc <__swhatbuf_r>
 8008628:	9900      	ldr	r1, [sp, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	4630      	mov	r0, r6
 800862e:	f000 f877 	bl	8008720 <_malloc_r>
 8008632:	b948      	cbnz	r0, 8008648 <__smakebuf_r+0x44>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	059a      	lsls	r2, r3, #22
 800863a:	d4ef      	bmi.n	800861c <__smakebuf_r+0x18>
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	e7e3      	b.n	8008610 <__smakebuf_r+0xc>
 8008648:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <__smakebuf_r+0x7c>)
 800864a:	62b3      	str	r3, [r6, #40]	; 0x28
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	6020      	str	r0, [r4, #0]
 8008650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	6163      	str	r3, [r4, #20]
 800865a:	9b01      	ldr	r3, [sp, #4]
 800865c:	6120      	str	r0, [r4, #16]
 800865e:	b15b      	cbz	r3, 8008678 <__smakebuf_r+0x74>
 8008660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008664:	4630      	mov	r0, r6
 8008666:	f000 f93d 	bl	80088e4 <_isatty_r>
 800866a:	b128      	cbz	r0, 8008678 <__smakebuf_r+0x74>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f023 0303 	bic.w	r3, r3, #3
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	431d      	orrs	r5, r3
 800867c:	81a5      	strh	r5, [r4, #12]
 800867e:	e7cd      	b.n	800861c <__smakebuf_r+0x18>
 8008680:	08008471 	.word	0x08008471

08008684 <_free_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4605      	mov	r5, r0
 8008688:	2900      	cmp	r1, #0
 800868a:	d045      	beq.n	8008718 <_free_r+0x94>
 800868c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008690:	1f0c      	subs	r4, r1, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	bfb8      	it	lt
 8008696:	18e4      	addlt	r4, r4, r3
 8008698:	f000 f946 	bl	8008928 <__malloc_lock>
 800869c:	4a1f      	ldr	r2, [pc, #124]	; (800871c <_free_r+0x98>)
 800869e:	6813      	ldr	r3, [r2, #0]
 80086a0:	4610      	mov	r0, r2
 80086a2:	b933      	cbnz	r3, 80086b2 <_free_r+0x2e>
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6014      	str	r4, [r2, #0]
 80086a8:	4628      	mov	r0, r5
 80086aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ae:	f000 b93c 	b.w	800892a <__malloc_unlock>
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	d90c      	bls.n	80086d0 <_free_r+0x4c>
 80086b6:	6821      	ldr	r1, [r4, #0]
 80086b8:	1862      	adds	r2, r4, r1
 80086ba:	4293      	cmp	r3, r2
 80086bc:	bf04      	itt	eq
 80086be:	681a      	ldreq	r2, [r3, #0]
 80086c0:	685b      	ldreq	r3, [r3, #4]
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	bf04      	itt	eq
 80086c6:	1852      	addeq	r2, r2, r1
 80086c8:	6022      	streq	r2, [r4, #0]
 80086ca:	6004      	str	r4, [r0, #0]
 80086cc:	e7ec      	b.n	80086a8 <_free_r+0x24>
 80086ce:	4613      	mov	r3, r2
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	b10a      	cbz	r2, 80086d8 <_free_r+0x54>
 80086d4:	42a2      	cmp	r2, r4
 80086d6:	d9fa      	bls.n	80086ce <_free_r+0x4a>
 80086d8:	6819      	ldr	r1, [r3, #0]
 80086da:	1858      	adds	r0, r3, r1
 80086dc:	42a0      	cmp	r0, r4
 80086de:	d10b      	bne.n	80086f8 <_free_r+0x74>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	4401      	add	r1, r0
 80086e4:	1858      	adds	r0, r3, r1
 80086e6:	4282      	cmp	r2, r0
 80086e8:	6019      	str	r1, [r3, #0]
 80086ea:	d1dd      	bne.n	80086a8 <_free_r+0x24>
 80086ec:	6810      	ldr	r0, [r2, #0]
 80086ee:	6852      	ldr	r2, [r2, #4]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	4401      	add	r1, r0
 80086f4:	6019      	str	r1, [r3, #0]
 80086f6:	e7d7      	b.n	80086a8 <_free_r+0x24>
 80086f8:	d902      	bls.n	8008700 <_free_r+0x7c>
 80086fa:	230c      	movs	r3, #12
 80086fc:	602b      	str	r3, [r5, #0]
 80086fe:	e7d3      	b.n	80086a8 <_free_r+0x24>
 8008700:	6820      	ldr	r0, [r4, #0]
 8008702:	1821      	adds	r1, r4, r0
 8008704:	428a      	cmp	r2, r1
 8008706:	bf04      	itt	eq
 8008708:	6811      	ldreq	r1, [r2, #0]
 800870a:	6852      	ldreq	r2, [r2, #4]
 800870c:	6062      	str	r2, [r4, #4]
 800870e:	bf04      	itt	eq
 8008710:	1809      	addeq	r1, r1, r0
 8008712:	6021      	streq	r1, [r4, #0]
 8008714:	605c      	str	r4, [r3, #4]
 8008716:	e7c7      	b.n	80086a8 <_free_r+0x24>
 8008718:	bd38      	pop	{r3, r4, r5, pc}
 800871a:	bf00      	nop
 800871c:	200000a4 	.word	0x200000a4

08008720 <_malloc_r>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	1ccd      	adds	r5, r1, #3
 8008724:	f025 0503 	bic.w	r5, r5, #3
 8008728:	3508      	adds	r5, #8
 800872a:	2d0c      	cmp	r5, #12
 800872c:	bf38      	it	cc
 800872e:	250c      	movcc	r5, #12
 8008730:	2d00      	cmp	r5, #0
 8008732:	4606      	mov	r6, r0
 8008734:	db01      	blt.n	800873a <_malloc_r+0x1a>
 8008736:	42a9      	cmp	r1, r5
 8008738:	d903      	bls.n	8008742 <_malloc_r+0x22>
 800873a:	230c      	movs	r3, #12
 800873c:	6033      	str	r3, [r6, #0]
 800873e:	2000      	movs	r0, #0
 8008740:	bd70      	pop	{r4, r5, r6, pc}
 8008742:	f000 f8f1 	bl	8008928 <__malloc_lock>
 8008746:	4a21      	ldr	r2, [pc, #132]	; (80087cc <_malloc_r+0xac>)
 8008748:	6814      	ldr	r4, [r2, #0]
 800874a:	4621      	mov	r1, r4
 800874c:	b991      	cbnz	r1, 8008774 <_malloc_r+0x54>
 800874e:	4c20      	ldr	r4, [pc, #128]	; (80087d0 <_malloc_r+0xb0>)
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	b91b      	cbnz	r3, 800875c <_malloc_r+0x3c>
 8008754:	4630      	mov	r0, r6
 8008756:	f000 f83d 	bl	80087d4 <_sbrk_r>
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	f000 f838 	bl	80087d4 <_sbrk_r>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d124      	bne.n	80087b2 <_malloc_r+0x92>
 8008768:	230c      	movs	r3, #12
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	4630      	mov	r0, r6
 800876e:	f000 f8dc 	bl	800892a <__malloc_unlock>
 8008772:	e7e4      	b.n	800873e <_malloc_r+0x1e>
 8008774:	680b      	ldr	r3, [r1, #0]
 8008776:	1b5b      	subs	r3, r3, r5
 8008778:	d418      	bmi.n	80087ac <_malloc_r+0x8c>
 800877a:	2b0b      	cmp	r3, #11
 800877c:	d90f      	bls.n	800879e <_malloc_r+0x7e>
 800877e:	600b      	str	r3, [r1, #0]
 8008780:	50cd      	str	r5, [r1, r3]
 8008782:	18cc      	adds	r4, r1, r3
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f8d0 	bl	800892a <__malloc_unlock>
 800878a:	f104 000b 	add.w	r0, r4, #11
 800878e:	1d23      	adds	r3, r4, #4
 8008790:	f020 0007 	bic.w	r0, r0, #7
 8008794:	1ac3      	subs	r3, r0, r3
 8008796:	d0d3      	beq.n	8008740 <_malloc_r+0x20>
 8008798:	425a      	negs	r2, r3
 800879a:	50e2      	str	r2, [r4, r3]
 800879c:	e7d0      	b.n	8008740 <_malloc_r+0x20>
 800879e:	428c      	cmp	r4, r1
 80087a0:	684b      	ldr	r3, [r1, #4]
 80087a2:	bf16      	itet	ne
 80087a4:	6063      	strne	r3, [r4, #4]
 80087a6:	6013      	streq	r3, [r2, #0]
 80087a8:	460c      	movne	r4, r1
 80087aa:	e7eb      	b.n	8008784 <_malloc_r+0x64>
 80087ac:	460c      	mov	r4, r1
 80087ae:	6849      	ldr	r1, [r1, #4]
 80087b0:	e7cc      	b.n	800874c <_malloc_r+0x2c>
 80087b2:	1cc4      	adds	r4, r0, #3
 80087b4:	f024 0403 	bic.w	r4, r4, #3
 80087b8:	42a0      	cmp	r0, r4
 80087ba:	d005      	beq.n	80087c8 <_malloc_r+0xa8>
 80087bc:	1a21      	subs	r1, r4, r0
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f808 	bl	80087d4 <_sbrk_r>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d0cf      	beq.n	8008768 <_malloc_r+0x48>
 80087c8:	6025      	str	r5, [r4, #0]
 80087ca:	e7db      	b.n	8008784 <_malloc_r+0x64>
 80087cc:	200000a4 	.word	0x200000a4
 80087d0:	200000a8 	.word	0x200000a8

080087d4 <_sbrk_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4c06      	ldr	r4, [pc, #24]	; (80087f0 <_sbrk_r+0x1c>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4605      	mov	r5, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	f7fc fcd0 	bl	8005184 <_sbrk>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_sbrk_r+0x1a>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_sbrk_r+0x1a>
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	200001a8 	.word	0x200001a8

080087f4 <__sread>:
 80087f4:	b510      	push	{r4, lr}
 80087f6:	460c      	mov	r4, r1
 80087f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fc:	f000 f896 	bl	800892c <_read_r>
 8008800:	2800      	cmp	r0, #0
 8008802:	bfab      	itete	ge
 8008804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008806:	89a3      	ldrhlt	r3, [r4, #12]
 8008808:	181b      	addge	r3, r3, r0
 800880a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800880e:	bfac      	ite	ge
 8008810:	6563      	strge	r3, [r4, #84]	; 0x54
 8008812:	81a3      	strhlt	r3, [r4, #12]
 8008814:	bd10      	pop	{r4, pc}

08008816 <__swrite>:
 8008816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800881a:	461f      	mov	r7, r3
 800881c:	898b      	ldrh	r3, [r1, #12]
 800881e:	05db      	lsls	r3, r3, #23
 8008820:	4605      	mov	r5, r0
 8008822:	460c      	mov	r4, r1
 8008824:	4616      	mov	r6, r2
 8008826:	d505      	bpl.n	8008834 <__swrite+0x1e>
 8008828:	2302      	movs	r3, #2
 800882a:	2200      	movs	r2, #0
 800882c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008830:	f000 f868 	bl	8008904 <_lseek_r>
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800883a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800883e:	81a3      	strh	r3, [r4, #12]
 8008840:	4632      	mov	r2, r6
 8008842:	463b      	mov	r3, r7
 8008844:	4628      	mov	r0, r5
 8008846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800884a:	f000 b817 	b.w	800887c <_write_r>

0800884e <__sseek>:
 800884e:	b510      	push	{r4, lr}
 8008850:	460c      	mov	r4, r1
 8008852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008856:	f000 f855 	bl	8008904 <_lseek_r>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	bf15      	itete	ne
 8008860:	6560      	strne	r0, [r4, #84]	; 0x54
 8008862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800886a:	81a3      	strheq	r3, [r4, #12]
 800886c:	bf18      	it	ne
 800886e:	81a3      	strhne	r3, [r4, #12]
 8008870:	bd10      	pop	{r4, pc}

08008872 <__sclose>:
 8008872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008876:	f000 b813 	b.w	80088a0 <_close_r>
	...

0800887c <_write_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4c07      	ldr	r4, [pc, #28]	; (800889c <_write_r+0x20>)
 8008880:	4605      	mov	r5, r0
 8008882:	4608      	mov	r0, r1
 8008884:	4611      	mov	r1, r2
 8008886:	2200      	movs	r2, #0
 8008888:	6022      	str	r2, [r4, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f7fc fc29 	bl	80050e2 <_write>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_write_r+0x1e>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	b103      	cbz	r3, 800889a <_write_r+0x1e>
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	200001a8 	.word	0x200001a8

080088a0 <_close_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4c06      	ldr	r4, [pc, #24]	; (80088bc <_close_r+0x1c>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4605      	mov	r5, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	f7fc fc35 	bl	800511a <_close>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_close_r+0x1a>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_close_r+0x1a>
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	200001a8 	.word	0x200001a8

080088c0 <_fstat_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4c07      	ldr	r4, [pc, #28]	; (80088e0 <_fstat_r+0x20>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4605      	mov	r5, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	f7fc fc30 	bl	8005132 <_fstat>
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	d102      	bne.n	80088dc <_fstat_r+0x1c>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	b103      	cbz	r3, 80088dc <_fstat_r+0x1c>
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	bd38      	pop	{r3, r4, r5, pc}
 80088de:	bf00      	nop
 80088e0:	200001a8 	.word	0x200001a8

080088e4 <_isatty_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4c06      	ldr	r4, [pc, #24]	; (8008900 <_isatty_r+0x1c>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4605      	mov	r5, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	f7fc fc2f 	bl	8005152 <_isatty>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_isatty_r+0x1a>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_isatty_r+0x1a>
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	200001a8 	.word	0x200001a8

08008904 <_lseek_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4c07      	ldr	r4, [pc, #28]	; (8008924 <_lseek_r+0x20>)
 8008908:	4605      	mov	r5, r0
 800890a:	4608      	mov	r0, r1
 800890c:	4611      	mov	r1, r2
 800890e:	2200      	movs	r2, #0
 8008910:	6022      	str	r2, [r4, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f7fc fc28 	bl	8005168 <_lseek>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_lseek_r+0x1e>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	b103      	cbz	r3, 8008922 <_lseek_r+0x1e>
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	200001a8 	.word	0x200001a8

08008928 <__malloc_lock>:
 8008928:	4770      	bx	lr

0800892a <__malloc_unlock>:
 800892a:	4770      	bx	lr

0800892c <_read_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4c07      	ldr	r4, [pc, #28]	; (800894c <_read_r+0x20>)
 8008930:	4605      	mov	r5, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	6022      	str	r2, [r4, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7fc fbb4 	bl	80050a8 <_read>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_read_r+0x1e>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	b103      	cbz	r3, 800894a <_read_r+0x1e>
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	200001a8 	.word	0x200001a8

08008950 <_init>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr

0800895c <_fini>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr
